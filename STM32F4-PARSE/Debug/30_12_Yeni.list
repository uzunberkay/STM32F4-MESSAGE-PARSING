
30_12_Yeni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e0  080086e0  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080086e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001e64  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fb0  20001fb0  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012906  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000330e  00000000  00000000  00032ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010f8  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce7  00000000  00000000  00036ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b41  00000000  00000000  00037bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000159e9  00000000  00000000  0005b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc80f  00000000  00000000  000710e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004b4c  00000000  00000000  0013d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014243c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008530 	.word	0x08008530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008530 	.word	0x08008530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fc82 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f814 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8ce 	bl	8000728 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800058c:	f006 fdfa 	bl	8007184 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000590:	f000 f878 	bl	8000684 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <main+0x2c>)
 8000596:	f002 fef9 	bl	800338c <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tim1_count=__HAL_TIM_GetCounter(&htim1);
 800059a:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <main+0x2c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b02      	ldr	r3, [pc, #8]	; (80005ac <main+0x30>)
 80005a4:	801a      	strh	r2, [r3, #0]
 80005a6:	e7f8      	b.n	800059a <main+0x1e>
 80005a8:	20000168 	.word	0x20000168
 80005ac:	200001b0 	.word	0x200001b0

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 fb32 	bl	8007c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	; (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000624:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f9e8 	bl	8002a0c <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000642:	f000 f899 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000652:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fc49 	bl	8002efc <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000670:	f000 f882 	bl	8000778 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	; 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <MX_TIM1_Init+0xa0>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 41999;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006a8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80006ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ce:	4814      	ldr	r0, [pc, #80]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006d0:	f002 fe0c 	bl	80032ec <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006da:	f000 f84d 	bl	8000778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_TIM1_Init+0x9c>)
 80006ec:	f002 feb6 	bl	800345c <HAL_TIM_ConfigClockSource>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006f6:	f000 f83f 	bl	8000778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_TIM1_Init+0x9c>)
 8000708:	f003 f8aa 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000712:	f000 f831 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000168 	.word	0x20000168
 8000724:	40010000 	.word	0x40010000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <MX_GPIO_Init+0x4c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_GPIO_Init+0x4c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>

08000782 <hexToUint8>:
 * @brief Hexadecimal bir diziyi temsil eden bir char dizisinden uint8_t degeri cikarmak icin kullanilir.
 * @param startIndex: Başlangic indeksi
 * @param hex: Hexadecimal diziyi temsil eden char dizisi
 * @retval uint8_t turunde cikartilan deger
 */
uint8_t hexToUint8(int startIndex, char hex[]) {
 8000782:	b480      	push	{r7}
 8000784:	b085      	sub	sp, #20
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
    uint8_t result = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
    uint8_t length=2;	// Bir uint8_t icin hexadecimal değer 2 karakterlidir.
 8000790:	2302      	movs	r3, #2
 8000792:	737b      	strb	r3, [r7, #13]

    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	73bb      	strb	r3, [r7, #14]
 8000798:	e052      	b.n	8000840 <hexToUint8+0xbe>
        result = result << 4;	// 4 bit sola kaydırma işlemi yapılır.
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	73fb      	strb	r3, [r7, #15]

        if (hex[i] >= '0' && hex[i] <= '9') {
 80007a0:	7bbb      	ldrb	r3, [r7, #14]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b2f      	cmp	r3, #47	; 0x2f
 80007aa:	d912      	bls.n	80007d2 <hexToUint8+0x50>
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b39      	cmp	r3, #57	; 0x39
 80007b6:	d80c      	bhi.n	80007d2 <hexToUint8+0x50>
            result |= hex[i] - '0';			// '0' ile '9' arasındaki karakterleri isler.
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3b30      	subs	r3, #48	; 0x30
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	e033      	b.n	800083a <hexToUint8+0xb8>
        } else if (hex[i] >= 'A' && hex[i] <= 'F') {
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b40      	cmp	r3, #64	; 0x40
 80007dc:	d912      	bls.n	8000804 <hexToUint8+0x82>
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b46      	cmp	r3, #70	; 0x46
 80007e8:	d80c      	bhi.n	8000804 <hexToUint8+0x82>
            result |= hex[i] - 'A' + 10;	// 'A' ile 'F' arasındaki karakterleri isler.
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3b37      	subs	r3, #55	; 0x37
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e01a      	b.n	800083a <hexToUint8+0xb8>
        } else if (hex[i] >= 'a' && hex[i] <= 'f') {
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b60      	cmp	r3, #96	; 0x60
 800080e:	d912      	bls.n	8000836 <hexToUint8+0xb4>
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b66      	cmp	r3, #102	; 0x66
 800081a:	d80c      	bhi.n	8000836 <hexToUint8+0xb4>
            result |= hex[i] - 'a' + 10;	// 'a' ile 'f' arasındaki karakterleri isler.
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3b57      	subs	r3, #87	; 0x57
 8000826:	b2db      	uxtb	r3, r3
 8000828:	b25a      	sxtb	r2, r3
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4313      	orrs	r3, r2
 8000830:	b25b      	sxtb	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e001      	b.n	800083a <hexToUint8+0xb8>
        } else {
            return -1;						// Gecersiz karakter durumunda -1 dondurulur.
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	e009      	b.n	800084e <hexToUint8+0xcc>
    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	73bb      	strb	r3, [r7, #14]
 8000840:	7bba      	ldrb	r2, [r7, #14]
 8000842:	7b79      	ldrb	r1, [r7, #13]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	440b      	add	r3, r1
 8000848:	429a      	cmp	r2, r3
 800084a:	dba6      	blt.n	800079a <hexToUint8+0x18>

        }
    }

    return result;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <hexToUint16>:
 * @brief Hexadecimal bir diziyi temsil eden bir char dizisinden uint16_t degeri cikarmak icin kullanilir.
 * @param startIndex: Başlangic indeksi
 * @param hex: Hexadecimal diziyi temsil eden char dizisi
 * @retval uint16_t turunde cikartilan deger
 */
uint16_t hexToUint16(int startIndex, char hex[]) {
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	81fb      	strh	r3, [r7, #14]
    uint8_t length=4;	// Bir uint16_t icin hexadecimal değer 4 karakterlidir.
 8000868:	2304      	movs	r3, #4
 800086a:	733b      	strb	r3, [r7, #12]

    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	737b      	strb	r3, [r7, #13]
 8000870:	e056      	b.n	8000920 <hexToUint16+0xc6>
        result = result << 4;	// 4 bit sola kaydirma islemi yapılır.
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	81fb      	strh	r3, [r7, #14]

        if (hex[i] >= '0' && hex[i] <= '9') {
 8000878:	7b7b      	ldrb	r3, [r7, #13]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b2f      	cmp	r3, #47	; 0x2f
 8000882:	d913      	bls.n	80008ac <hexToUint16+0x52>
 8000884:	7b7b      	ldrb	r3, [r7, #13]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b39      	cmp	r3, #57	; 0x39
 800088e:	d80d      	bhi.n	80008ac <hexToUint16+0x52>
            result |= hex[i] - '0';				// '0' ile '9' arasındaki karakterleri isler.
 8000890:	7b7b      	ldrb	r3, [r7, #13]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b29b      	uxth	r3, r3
 800089a:	3b30      	subs	r3, #48	; 0x30
 800089c:	b29b      	uxth	r3, r3
 800089e:	b21a      	sxth	r2, r3
 80008a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b21b      	sxth	r3, r3
 80008a8:	81fb      	strh	r3, [r7, #14]
 80008aa:	e036      	b.n	800091a <hexToUint16+0xc0>
        } else if (hex[i] >= 'A' && hex[i] <= 'F') {
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b40      	cmp	r3, #64	; 0x40
 80008b6:	d913      	bls.n	80008e0 <hexToUint16+0x86>
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b46      	cmp	r3, #70	; 0x46
 80008c2:	d80d      	bhi.n	80008e0 <hexToUint16+0x86>
            result |= hex[i] - 'A' + 10;		// 'A' ile 'F' arasındaki karakterleri isler.
 80008c4:	7b7b      	ldrb	r3, [r7, #13]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	3b37      	subs	r3, #55	; 0x37
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	81fb      	strh	r3, [r7, #14]
 80008de:	e01c      	b.n	800091a <hexToUint16+0xc0>
        } else if (hex[i] >= 'a' && hex[i] <= 'f') {
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b60      	cmp	r3, #96	; 0x60
 80008ea:	d913      	bls.n	8000914 <hexToUint16+0xba>
 80008ec:	7b7b      	ldrb	r3, [r7, #13]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b66      	cmp	r3, #102	; 0x66
 80008f6:	d80d      	bhi.n	8000914 <hexToUint16+0xba>
            result |= hex[i] - 'a' + 10;		// 'a' ile 'f' arasındaki karakterleri isler.
 80008f8:	7b7b      	ldrb	r3, [r7, #13]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	3b57      	subs	r3, #87	; 0x57
 8000904:	b29b      	uxth	r3, r3
 8000906:	b21a      	sxth	r2, r3
 8000908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800090c:	4313      	orrs	r3, r2
 800090e:	b21b      	sxth	r3, r3
 8000910:	81fb      	strh	r3, [r7, #14]
 8000912:	e002      	b.n	800091a <hexToUint16+0xc0>
        } else {
            return -1;							// Gecersiz karakter durumunda -1 dondurulur.
 8000914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000918:	e009      	b.n	800092e <hexToUint16+0xd4>
    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 800091a:	7b7b      	ldrb	r3, [r7, #13]
 800091c:	3301      	adds	r3, #1
 800091e:	737b      	strb	r3, [r7, #13]
 8000920:	7b7a      	ldrb	r2, [r7, #13]
 8000922:	7b39      	ldrb	r1, [r7, #12]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	440b      	add	r3, r1
 8000928:	429a      	cmp	r2, r3
 800092a:	dba2      	blt.n	8000872 <hexToUint16+0x18>

        }
    }

    return result;
 800092c:	89fb      	ldrh	r3, [r7, #14]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <hexToUint32>:
 * @brief Hexadecimal bir diziyi temsil eden bir char dizisinden uint32_t degeri cikarmak icin kullanilir.
 * @param startIndex: Başlangic indeksi
 * @param hex: Hexadecimal diziyi temsil eden char dizisi
 * @retval uint32_t turunde cikartilan deger
 */
uint32_t hexToUint32(int startIndex, char hex[]) {
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
    uint8_t length=8;	// Bir uint32_t icin hexadecimal değer 8 karakterlidir.
 8000948:	2308      	movs	r3, #8
 800094a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	72fb      	strb	r3, [r7, #11]
 8000950:	e04a      	b.n	80009e8 <hexToUint32+0xae>
        result = result << 4;	// 4 bit sola kaydirma islemi yapılır.
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]

        if (hex[i] >= '0' && hex[i] <= '9') {
 8000958:	7afb      	ldrb	r3, [r7, #11]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b2f      	cmp	r3, #47	; 0x2f
 8000962:	d90f      	bls.n	8000984 <hexToUint32+0x4a>
 8000964:	7afb      	ldrb	r3, [r7, #11]
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b39      	cmp	r3, #57	; 0x39
 800096e:	d809      	bhi.n	8000984 <hexToUint32+0x4a>
            result |= hex[i] - '0';				// '0' ile '9' arasındaki karakterleri isler.
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3b30      	subs	r3, #48	; 0x30
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e02e      	b.n	80009e2 <hexToUint32+0xa8>
        } else if (hex[i] >= 'A' && hex[i] <= 'F') {
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b40      	cmp	r3, #64	; 0x40
 800098e:	d90f      	bls.n	80009b0 <hexToUint32+0x76>
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b46      	cmp	r3, #70	; 0x46
 800099a:	d809      	bhi.n	80009b0 <hexToUint32+0x76>
            result |= hex[i] - 'A' + 10;		// 'A' ile 'F' arasındaki karakterleri isler.
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	3b37      	subs	r3, #55	; 0x37
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e018      	b.n	80009e2 <hexToUint32+0xa8>
        } else if (hex[i] >= 'a' && hex[i] <= 'f') {
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b60      	cmp	r3, #96	; 0x60
 80009ba:	d90f      	bls.n	80009dc <hexToUint32+0xa2>
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b66      	cmp	r3, #102	; 0x66
 80009c6:	d809      	bhi.n	80009dc <hexToUint32+0xa2>
            result |= hex[i] - 'a' + 10;		// 'a' ile 'f' arasındaki karakterleri isler.
 80009c8:	7afb      	ldrb	r3, [r7, #11]
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	3b57      	subs	r3, #87	; 0x57
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e002      	b.n	80009e2 <hexToUint32+0xa8>
        } else {
            return -1;							// Gecersiz karakter durumunda -1 dondurulur.
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	e009      	b.n	80009f6 <hexToUint32+0xbc>
    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	3301      	adds	r3, #1
 80009e6:	72fb      	strb	r3, [r7, #11]
 80009e8:	7afa      	ldrb	r2, [r7, #11]
 80009ea:	7ab9      	ldrb	r1, [r7, #10]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	440b      	add	r3, r1
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbae      	blt.n	8000952 <hexToUint32+0x18>

        }
    }

    return result;
 80009f4:	68fb      	ldr	r3, [r7, #12]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <readCommand>:
 * @brief Gelen mesajın veri tipine göre özel işlemleri gerçekleştiren fonksiyon.
 *
 * @param messageString: Mesajı temsil eden string.
 * @return ErrorCode: Fonksiyonun başarılı olup olmadığını belirten hata kodu.
 */
int readCommand() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    switch (globalMessage.dataType) {
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <readCommand+0x74>)
 8000a0a:	7b5b      	ldrb	r3, [r3, #13]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d006      	beq.n	8000a1e <readCommand+0x1a>
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	dc26      	bgt.n	8000a62 <readCommand+0x5e>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d026      	beq.n	8000a66 <readCommand+0x62>
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d026      	beq.n	8000a6a <readCommand+0x66>
 8000a1c:	e021      	b.n	8000a62 <readCommand+0x5e>
            break;
        case FLOAT_TYPE:
            // FLOAT_TYPE ile ilgili islemler yapilabilir.
            break;
        case INT_TYPE:
            if (globalMessage.commandNumber == 0x1234) {
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <readCommand+0x74>)
 8000a20:	885b      	ldrh	r3, [r3, #2]
 8000a22:	f241 2234 	movw	r2, #4660	; 0x1234
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d121      	bne.n	8000a6e <readCommand+0x6a>
                if (globalMessage.commandAddress == &tim1_count) {
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <readCommand+0x74>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <readCommand+0x78>)
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d107      	bne.n	8000a46 <readCommand+0x42>
                    sprintf(dizi, "Tim1 degeri: %d\n", tim1_count);
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <readCommand+0x78>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <readCommand+0x7c>)
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <readCommand+0x80>)
 8000a40:	f007 f8d2 	bl	8007be8 <siprintf>
 8000a44:	e003      	b.n	8000a4e <readCommand+0x4a>
                } else {
                    sprintf(dizi, "Tim1 degeri yollanamadi\n");
 8000a46:	4910      	ldr	r1, [pc, #64]	; (8000a88 <readCommand+0x84>)
 8000a48:	480e      	ldr	r0, [pc, #56]	; (8000a84 <readCommand+0x80>)
 8000a4a:	f007 f8cd 	bl	8007be8 <siprintf>
                }
                CDC_Transmit_FS((uint8_t*)dizi, strlen(dizi));
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <readCommand+0x80>)
 8000a50:	f7ff fbbe 	bl	80001d0 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480a      	ldr	r0, [pc, #40]	; (8000a84 <readCommand+0x80>)
 8000a5c:	f006 fc68 	bl	8007330 <CDC_Transmit_FS>
            } else {
                // commandNumber kontrolu ile baska komutlar ile farkli islemler yapilabilir.
            }
            break;
 8000a60:	e005      	b.n	8000a6e <readCommand+0x6a>
        default:
            return INVALID_DATA_TYPE;
 8000a62:	2304      	movs	r3, #4
 8000a64:	e005      	b.n	8000a72 <readCommand+0x6e>
            break;
 8000a66:	bf00      	nop
 8000a68:	e002      	b.n	8000a70 <readCommand+0x6c>
            break;
 8000a6a:	bf00      	nop
 8000a6c:	e000      	b.n	8000a70 <readCommand+0x6c>
            break;
 8000a6e:	bf00      	nop
    }
    return NO_ERROR;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000023c 	.word	0x2000023c
 8000a7c:	200001b0 	.word	0x200001b0
 8000a80:	08008548 	.word	0x08008548
 8000a84:	200001b4 	.word	0x200001b4
 8000a88:	0800855c 	.word	0x0800855c

08000a8c <writeCommand>:
 * yeni degeri iletisim portuna gonderir.
 *
 * @param messageString: Mesaji temsil eden string.
 * @return ErrorCode: Fonksiyonun basarili olup olmadigini belirten hata kodu.
 */
int writeCommand(const char* messageString) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    switch (globalMessage.dataType) {
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <writeCommand+0x70>)
 8000a96:	7b5b      	ldrb	r3, [r3, #13]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d006      	beq.n	8000aaa <writeCommand+0x1e>
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	dc22      	bgt.n	8000ae6 <writeCommand+0x5a>
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d022      	beq.n	8000aea <writeCommand+0x5e>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d022      	beq.n	8000aee <writeCommand+0x62>
 8000aa8:	e01d      	b.n	8000ae6 <writeCommand+0x5a>
            break;
        case FLOAT_TYPE:
            // FLOAT_TYPE ile ilgili islemler eklenebilir.
            break;
        case INT_TYPE:
            globalMessage.dataBlock.intData= hexToUint16(CHAR_DATA_BLOCK_START_INDEX, messageString);
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2013      	movs	r0, #19
 8000aae:	f7ff fed4 	bl	800085a <hexToUint16>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <writeCommand+0x70>)
 8000ab8:	821a      	strh	r2, [r3, #16]
            __HAL_TIM_SET_COUNTER(&htim1, globalMessage.dataBlock.intData);
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <writeCommand+0x70>)
 8000abc:	8a1a      	ldrh	r2, [r3, #16]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <writeCommand+0x74>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
            sprintf(dizi, "Yeni Tim1 degeri: %d\n", globalMessage.dataBlock.intData);
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <writeCommand+0x70>)
 8000ac6:	8a1b      	ldrh	r3, [r3, #16]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	490e      	ldr	r1, [pc, #56]	; (8000b04 <writeCommand+0x78>)
 8000acc:	480e      	ldr	r0, [pc, #56]	; (8000b08 <writeCommand+0x7c>)
 8000ace:	f007 f88b 	bl	8007be8 <siprintf>
            CDC_Transmit_FS((uint8_t*)dizi, strlen(dizi));
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <writeCommand+0x7c>)
 8000ad4:	f7ff fb7c 	bl	80001d0 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	480a      	ldr	r0, [pc, #40]	; (8000b08 <writeCommand+0x7c>)
 8000ae0:	f006 fc26 	bl	8007330 <CDC_Transmit_FS>
            break;
 8000ae4:	e004      	b.n	8000af0 <writeCommand+0x64>
        default:
            return INVALID_DATA_TYPE;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	e003      	b.n	8000af2 <writeCommand+0x66>
            break;
 8000aea:	bf00      	nop
 8000aec:	e000      	b.n	8000af0 <writeCommand+0x64>
            break;
 8000aee:	bf00      	nop
    }
    return NO_ERROR;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000023c 	.word	0x2000023c
 8000b00:	20000168 	.word	0x20000168
 8000b04:	08008578 	.word	0x08008578
 8000b08:	200001b4 	.word	0x200001b4

08000b0c <parseMessage>:
 * ozel islemleri gerceklestirir (ornegin, belirli bir komut numarasina veya adresine göre kontrol).
 *
 * @param messageString: Analiz edilecek mesaj stringi.
 * @return ErrorCode: Fonksiyonun basarılı olup olmadığını belirten hata kodu.
 */
ErrorCode parseMessage(char* messageString) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    // Başlangıç karakterini kontrol et
	if(strlen(messageString)!=Message_Length)
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fb5b 	bl	80001d0 <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b18      	cmp	r3, #24
 8000b1e:	d001      	beq.n	8000b24 <parseMessage+0x18>
	{
		return INVALID_DATA_SIZE;
 8000b20:	2305      	movs	r3, #5
 8000b22:	e059      	b.n	8000bd8 <parseMessage+0xcc>
	}
    if (messageString[0] != 0xA3) // '£' karakteri kabul etmedigi icin ASCII karsiligi olan hex degerini kullandim.
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2ba3      	cmp	r3, #163	; 0xa3
 8000b2a:	d001      	beq.n	8000b30 <parseMessage+0x24>
    {
        return INVALID_START_CHAR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e053      	b.n	8000bd8 <parseMessage+0xcc>
    }


    // Bitiş karakterini kontrol et
    if (messageString[strlen(messageString)-1] != '%') {
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fb4d 	bl	80001d0 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b25      	cmp	r3, #37	; 0x25
 8000b42:	d001      	beq.n	8000b48 <parseMessage+0x3c>
        return INVALID_END_CHAR;
 8000b44:	2302      	movs	r3, #2
 8000b46:	e047      	b.n	8000bd8 <parseMessage+0xcc>
    }
    globalMessage.start=messageString[0];
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <parseMessage+0xd4>)
 8000b4e:	701a      	strb	r2, [r3, #0]
    globalMessage.end=messageString[strlen(messageString)-1];
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fb3d 	bl	80001d0 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <parseMessage+0xd4>)
 8000b62:	751a      	strb	r2, [r3, #20]
//Bu islem seti, bir char dizisinden belirli hexadecimal degerleri cikararak, bu degerleri dogrudan belirli veri turlerine donusturup, global degiskenlere atar.
    globalMessage.commandNumber = hexToUint16(COMMAND_NUMBER_START_INDEX, messageString);
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	2001      	movs	r0, #1
 8000b68:	f7ff fe77 	bl	800085a <hexToUint16>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <parseMessage+0xd4>)
 8000b72:	805a      	strh	r2, [r3, #2]
    globalMessage.slaveNumber = hexToUint8(SLAVE_NUMBER_START_INDEX,messageString);
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	2005      	movs	r0, #5
 8000b78:	f7ff fe03 	bl	8000782 <hexToUint8>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <parseMessage+0xd4>)
 8000b82:	711a      	strb	r2, [r3, #4]
    globalMessage.commandAddress=hexToUint32(COMMAND_ADDRESS_START_INDEX, messageString);
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	2007      	movs	r0, #7
 8000b88:	f7ff fed7 	bl	800093a <hexToUint32>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <parseMessage+0xd4>)
 8000b90:	6093      	str	r3, [r2, #8]
    globalMessage.commandType = hexToUint8(COMMAND_TYPE_START_INDEX,messageString);
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	200f      	movs	r0, #15
 8000b96:	f7ff fdf4 	bl	8000782 <hexToUint8>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <parseMessage+0xd4>)
 8000ba0:	731a      	strb	r2, [r3, #12]
    globalMessage.dataType = hexToUint8(DATA_TYPE_START_INDEX,messageString);
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2011      	movs	r0, #17
 8000ba6:	f7ff fdec 	bl	8000782 <hexToUint8>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <parseMessage+0xd4>)
 8000bb0:	735a      	strb	r2, [r3, #13]



    switch (globalMessage.commandType) {
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <parseMessage+0xd4>)
 8000bb4:	7b1b      	ldrb	r3, [r3, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <parseMessage+0xb4>
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d005      	beq.n	8000bca <parseMessage+0xbe>
 8000bbe:	e00a      	b.n	8000bd6 <parseMessage+0xca>
            case READ_COMMAND:
                return readCommand();
 8000bc0:	f7ff ff20 	bl	8000a04 <readCommand>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	e006      	b.n	8000bd8 <parseMessage+0xcc>
            case WRITE_COMMAND:
                return writeCommand(messageString);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff5e 	bl	8000a8c <writeCommand>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	e000      	b.n	8000bd8 <parseMessage+0xcc>
            default:
                return INVALID_COMMAND_TYPE;
 8000bd6:	2303      	movs	r3, #3
        }
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000023c 	.word	0x2000023c

08000be4 <parseData>:
 * @brief Analiz edilmis bir mesajin durumuna gore islem yapar ve gerekirse hata mesaji gonderir.
 *
 * @param buffer: Analiz edilmis mesajin string temsilcisi.
 */
void parseData(char *buffer)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	ErrorCode result = parseMessage(buffer);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff8d 	bl	8000b0c <parseMessage>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]

	    switch (result) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2b05      	cmp	r3, #5
 8000bfa:	d82e      	bhi.n	8000c5a <parseData+0x76>
 8000bfc:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <parseData+0x20>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c1d 	.word	0x08000c1d
 8000c08:	08000c29 	.word	0x08000c29
 8000c0c:	08000c33 	.word	0x08000c33
 8000c10:	08000c3d 	.word	0x08000c3d
 8000c14:	08000c47 	.word	0x08000c47
 8000c18:	08000c51 	.word	0x08000c51
	            case NO_ERROR:
	                successfulMessageCount++;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <parseData+0xa4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <parseData+0xa4>)
 8000c24:	6013      	str	r3, [r2, #0]
	                break;
 8000c26:	e019      	b.n	8000c5c <parseData+0x78>
	            case INVALID_START_CHAR:
            		sprintf(dizi,"Baslangic karakteri hatali!\n");
 8000c28:	4918      	ldr	r1, [pc, #96]	; (8000c8c <parseData+0xa8>)
 8000c2a:	4819      	ldr	r0, [pc, #100]	; (8000c90 <parseData+0xac>)
 8000c2c:	f006 ffdc 	bl	8007be8 <siprintf>
	                break;
 8000c30:	e014      	b.n	8000c5c <parseData+0x78>
	            case INVALID_END_CHAR:
            		sprintf(dizi,"Bitis karakteri hatali!\n");
 8000c32:	4918      	ldr	r1, [pc, #96]	; (8000c94 <parseData+0xb0>)
 8000c34:	4816      	ldr	r0, [pc, #88]	; (8000c90 <parseData+0xac>)
 8000c36:	f006 ffd7 	bl	8007be8 <siprintf>
	                break;
 8000c3a:	e00f      	b.n	8000c5c <parseData+0x78>
	            case INVALID_COMMAND_TYPE:
            		sprintf(dizi,"Gecersiz komut tipi! Mesaj gonderimi basarisiz!\n");
 8000c3c:	4916      	ldr	r1, [pc, #88]	; (8000c98 <parseData+0xb4>)
 8000c3e:	4814      	ldr	r0, [pc, #80]	; (8000c90 <parseData+0xac>)
 8000c40:	f006 ffd2 	bl	8007be8 <siprintf>

	                break;
 8000c44:	e00a      	b.n	8000c5c <parseData+0x78>
	            case INVALID_DATA_TYPE:
            		sprintf(dizi,"Gecersiz veri tipi! Mesaj gonderimi basarisiz!\n");
 8000c46:	4915      	ldr	r1, [pc, #84]	; (8000c9c <parseData+0xb8>)
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <parseData+0xac>)
 8000c4a:	f006 ffcd 	bl	8007be8 <siprintf>

	                break;
 8000c4e:	e005      	b.n	8000c5c <parseData+0x78>
	            case INVALID_DATA_SIZE:
            		sprintf(dizi,"Gecersiz veri uzunlugu!\n");
 8000c50:	4913      	ldr	r1, [pc, #76]	; (8000ca0 <parseData+0xbc>)
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <parseData+0xac>)
 8000c54:	f006 ffc8 	bl	8007be8 <siprintf>
	                break;
 8000c58:	e000      	b.n	8000c5c <parseData+0x78>
	            default:
	                break;
 8000c5a:	bf00      	nop
	        }
	    if (result != NO_ERROR) {
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00d      	beq.n	8000c7e <parseData+0x9a>
	            CDC_Transmit_FS((uint8_t*)dizi, strlen(dizi));
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <parseData+0xac>)
 8000c64:	f7ff fab4 	bl	80001d0 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <parseData+0xac>)
 8000c70:	f006 fb5e 	bl	8007330 <CDC_Transmit_FS>
	            errorMessageCount++;
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <parseData+0xc0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <parseData+0xc0>)
 8000c7c:	6013      	str	r3, [r2, #0]
	    }

}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001f4 	.word	0x200001f4
 8000c8c:	08008590 	.word	0x08008590
 8000c90:	200001b4 	.word	0x200001b4
 8000c94:	080085b0 	.word	0x080085b0
 8000c98:	080085cc 	.word	0x080085cc
 8000c9c:	08008600 	.word	0x08008600
 8000ca0:	08008630 	.word	0x08008630
 8000ca4:	200001f8 	.word	0x200001f8

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f000 fa34 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_TIM_Base_MspInit+0x3c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10d      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40023800 	.word	0x40023800

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f8d0 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <OTG_FS_IRQHandler+0x10>)
 8000d96:	f000 fd0b 	bl	80017b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000173c 	.word	0x2000173c

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f006 ff30 	bl	8007c38 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20020000 	.word	0x20020000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000254 	.word	0x20000254
 8000e0c:	20001fb0 	.word	0x20001fb0

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ffd7 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f006 feef 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fb89 	bl	800057c <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000e78:	080086e8 	.word	0x080086e8
  ldr r2, =_sbss
 8000e7c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e80:	20001fb0 	.word	0x20001fb0

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_Init+0x40>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_Init+0x40>)
 8000e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x40>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f94f 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fef4 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f967 	bl	80011be <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f92f 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000258 	.word	0x20000258

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000258 	.word	0x20000258

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e16b      	b.n	80014cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 815a 	bne.w	80014c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	2b02      	cmp	r3, #2
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80b4 	beq.w	80014c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b60      	ldr	r3, [pc, #384]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a5f      	ldr	r2, [pc, #380]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137a:	4a5b      	ldr	r2, [pc, #364]	; (80014e8 <HAL_GPIO_Init+0x310>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_GPIO_Init+0x314>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d02b      	beq.n	80013fe <HAL_GPIO_Init+0x226>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <HAL_GPIO_Init+0x318>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d025      	beq.n	80013fa <HAL_GPIO_Init+0x222>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_GPIO_Init+0x31c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01f      	beq.n	80013f6 <HAL_GPIO_Init+0x21e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x320>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x21a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x324>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x216>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x328>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x212>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x32c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x20e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x330>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x20a>
 80013de:	2307      	movs	r3, #7
 80013e0:	e00e      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e00c      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00a      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x310>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_GPIO_Init+0x334>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a32      	ldr	r2, [pc, #200]	; (800150c <HAL_GPIO_Init+0x334>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_GPIO_Init+0x334>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_GPIO_Init+0x334>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_GPIO_Init+0x334>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001496:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_GPIO_Init+0x334>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_GPIO_Init+0x334>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_GPIO_Init+0x334>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f ae90 	bls.w	80011f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40021c00 	.word	0x40021c00
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	b08f      	sub	sp, #60	; 0x3c
 8001514:	af0a      	add	r7, sp, #40	; 0x28
 8001516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e10f      	b.n	8001742 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f006 f83f 	bl	80075c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2203      	movs	r2, #3
 8001546:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fb0e 	bl	8003b82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	687e      	ldr	r6, [r7, #4]
 800156e:	466d      	mov	r5, sp
 8001570:	f106 0410 	add.w	r4, r6, #16
 8001574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001580:	e885 0003 	stmia.w	r5, {r0, r1}
 8001584:	1d33      	adds	r3, r6, #4
 8001586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f002 f9e5 	bl	8003958 <USB_CoreInit>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0d0      	b.n	8001742 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fafc 	bl	8003ba4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e04a      	b.n	8001648 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	333d      	adds	r3, #61	; 0x3d
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	333c      	adds	r3, #60	; 0x3c
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	b298      	uxth	r0, r3
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3344      	adds	r3, #68	; 0x44
 80015ee:	4602      	mov	r2, r0
 80015f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3340      	adds	r3, #64	; 0x40
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3348      	adds	r3, #72	; 0x48
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	334c      	adds	r3, #76	; 0x4c
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3354      	adds	r3, #84	; 0x54
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3af      	bcc.n	80015b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e044      	b.n	80016e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3b5      	bcc.n	8001658 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	687e      	ldr	r6, [r7, #4]
 80016f4:	466d      	mov	r5, sp
 80016f6:	f106 0410 	add.w	r4, r6, #16
 80016fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001702:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001706:	e885 0003 	stmia.w	r5, {r0, r1}
 800170a:	1d33      	adds	r3, r6, #4
 800170c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f002 fa94 	bl	8003c3c <USB_DevInit>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2202      	movs	r2, #2
 800171e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00d      	b.n	8001742 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fbe3 	bl	8004f06 <USB_DevDisconnect>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800174a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_PCD_Start+0x1c>
 8001762:	2302      	movs	r3, #2
 8001764:	e020      	b.n	80017a8 <HAL_PCD_Start+0x5e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	2b01      	cmp	r3, #1
 8001774:	d109      	bne.n	800178a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800177a:	2b01      	cmp	r3, #1
 800177c:	d005      	beq.n	800178a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 f9e6 	bl	8003b60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fb93 	bl	8004ec4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08d      	sub	sp, #52	; 0x34
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fc51 	bl	800506e <USB_GetMode>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 848a 	bne.w	80020e8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 fbb5 	bl	8004f48 <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8480 	beq.w	80020e6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fba2 	bl	8004f48 <USB_ReadInterrupts>
 8001804:	4603      	mov	r3, r0
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d107      	bne.n	800181e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f002 0202 	and.w	r2, r2, #2
 800181c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fb90 	bl	8004f48 <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b10      	cmp	r3, #16
 8001830:	d161      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0210 	bic.w	r2, r2, #16
 8001840:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f003 020f 	and.w	r2, r3, #15
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	3304      	adds	r3, #4
 8001860:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	0c5b      	lsrs	r3, r3, #17
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	2b02      	cmp	r3, #2
 800186c:	d124      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d035      	beq.n	80018e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001888:	b29b      	uxth	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	6a38      	ldr	r0, [r7, #32]
 800188e:	f003 f9c7 	bl	8004c20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800189e:	441a      	add	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b0:	441a      	add	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	e016      	b.n	80018e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	0c5b      	lsrs	r3, r3, #17
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	2b06      	cmp	r3, #6
 80018c2:	d110      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018ca:	2208      	movs	r2, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	6a38      	ldr	r0, [r7, #32]
 80018d0:	f003 f9a6 	bl	8004c20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018e0:	441a      	add	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0210 	orr.w	r2, r2, #16
 80018f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fb24 	bl	8004f48 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001906:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800190a:	f040 80a7 	bne.w	8001a5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fb29 	bl	8004f6e <USB_ReadDevAllOutEpInterrupt>
 800191c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800191e:	e099      	b.n	8001a54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 808e 	beq.w	8001a48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fb4d 	bl	8004fd6 <USB_ReadDevOutEPInterrupt>
 800193c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00c      	beq.n	8001962 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001954:	461a      	mov	r2, r3
 8001956:	2301      	movs	r3, #1
 8001958:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800195a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fec3 	bl	80026e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001978:	461a      	mov	r2, r3
 800197a:	2308      	movs	r3, #8
 800197c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800197e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 ff99 	bl	80028b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	4413      	add	r3, r2
 8001998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800199c:	461a      	mov	r2, r3
 800199e:	2310      	movs	r3, #16
 80019a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d030      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b4:	2b80      	cmp	r3, #128	; 0x80
 80019b6:	d109      	bne.n	80019cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	3304      	adds	r3, #4
 80019e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2200      	movs	r2, #0
 80019ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f005 fee8 	bl	80077cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a24:	461a      	mov	r2, r3
 8001a26:	2320      	movs	r3, #32
 8001a28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a40:	461a      	mov	r2, r3
 8001a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f47f af62 	bne.w	8001920 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fa71 	bl	8004f48 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a70:	f040 80db 	bne.w	8001c2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fa92 	bl	8004fa2 <USB_ReadDevAllInEpInterrupt>
 8001a7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a84:	e0cd      	b.n	8001c22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80c2 	beq.w	8001c16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fab8 	bl	8005012 <USB_ReadDevInEPInterrupt>
 8001aa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d057      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69f9      	ldr	r1, [r7, #28]
 8001aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ace:	4013      	ands	r3, r2
 8001ad0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d132      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	334c      	adds	r3, #76	; 0x4c
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4403      	add	r3, r0
 8001b0c:	3348      	adds	r3, #72	; 0x48
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4419      	add	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4403      	add	r3, r0
 8001b20:	334c      	adds	r3, #76	; 0x4c
 8001b22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d113      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x3a2>
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	3354      	adds	r3, #84	; 0x54
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d108      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	f003 fabf 	bl	80050d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f005 fdb2 	bl	80076c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b74:	461a      	mov	r2, r3
 8001b76:	2308      	movs	r3, #8
 8001b78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b90:	461a      	mov	r2, r3
 8001b92:	2310      	movs	r3, #16
 8001b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bac:	461a      	mov	r2, r3
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d023      	beq.n	8001c04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bbe:	6a38      	ldr	r0, [r7, #32]
 8001bc0:	f002 f9a0 	bl	8003f04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	3338      	adds	r3, #56	; 0x38
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	78db      	ldrb	r3, [r3, #3]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d108      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2200      	movs	r2, #0
 8001be4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f005 fdff 	bl	80077f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2302      	movs	r3, #2
 8001c02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fcdb 	bl	80025cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f af2e 	bne.w	8001a86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 f98a 	bl	8004f48 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c3e:	d122      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c66:	2100      	movs	r1, #0
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fec3 	bl	80029f4 <HAL_PCDEx_LPM_Callback>
 8001c6e:	e002      	b.n	8001c76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f005 fd9d 	bl	80077b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 f95c 	bl	8004f48 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9a:	d112      	bne.n	8001cc2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d102      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f005 fd59 	bl	8007764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cc0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f93e 	bl	8004f48 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd6:	f040 80b7 	bne.w	8001e48 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 f905 	bl	8003f04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfe:	e046      	b.n	8001d8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d24:	0151      	lsls	r1, r2, #5
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	440a      	add	r2, r1
 8001d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d40:	461a      	mov	r2, r3
 8001d42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d58:	0151      	lsls	r1, r2, #5
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	440a      	add	r2, r1
 8001d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d78:	0151      	lsls	r1, r2, #5
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	440a      	add	r2, r1
 8001d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3b3      	bcc.n	8001d00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001daa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d016      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc4:	f043 030b 	orr.w	r3, r3, #11
 8001dc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dda:	f043 030b 	orr.w	r3, r3, #11
 8001dde:	6453      	str	r3, [r2, #68]	; 0x44
 8001de0:	e015      	b.n	8001e0e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001df4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001df8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e08:	f043 030b 	orr.w	r3, r3, #11
 8001e0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e32:	461a      	mov	r2, r3
 8001e34:	f003 f94c 	bl	80050d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 f87b 	bl	8004f48 <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e5c:	d124      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 f911 	bl	800508a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 f8c6 	bl	8003ffe <USB_GetDevSpeed>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681c      	ldr	r4, [r3, #0]
 8001e7e:	f001 fa29 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 8001e82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f001 fdc5 	bl	8003a1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f005 fc3d 	bl	8007712 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 f84b 	bl	8004f48 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d10a      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f005 fc1a 	bl	80076f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 0208 	and.w	r2, r2, #8
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 f836 	bl	8004f48 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d122      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	e014      	b.n	8001f22 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fb27 	bl	800256a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3301      	adds	r3, #1
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3e5      	bcc.n	8001ef8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f809 	bl	8004f48 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f40:	d13b      	bne.n	8001fba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f42:	2301      	movs	r3, #1
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e02b      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3340      	adds	r3, #64	; 0x40
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d115      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	da12      	bge.n	8001f9a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	333f      	adds	r3, #63	; 0x3f
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fae8 	bl	800256a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3ce      	bcc.n	8001f48 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 ffc2 	bl	8004f48 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fce:	d155      	bne.n	800207c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	e045      	b.n	8002062 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d12e      	bne.n	800205c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ffe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	da2b      	bge.n	800205c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002010:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002014:	429a      	cmp	r2, r3
 8002016:	d121      	bne.n	800205c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002058:	6053      	str	r3, [r2, #4]
            break;
 800205a:	e007      	b.n	800206c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	3301      	adds	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	429a      	cmp	r2, r3
 800206a:	d3b4      	bcc.n	8001fd6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800207a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f002 ff61 	bl	8004f48 <USB_ReadInterrupts>
 8002086:	4603      	mov	r3, r0
 8002088:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d10a      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f005 fbbe 	bl	8007814 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 ff4b 	bl	8004f48 <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d115      	bne.n	80020e8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f005 fbae 	bl	8007830 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	e000      	b.n	80020e8 <HAL_PCD_IRQHandler+0x938>
      return;
 80020e6:	bf00      	nop
    }
  }
}
 80020e8:	3734      	adds	r7, #52	; 0x34
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}

080020ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_PCD_SetAddress+0x1a>
 8002104:	2302      	movs	r3, #2
 8002106:	e013      	b.n	8002130 <HAL_PCD_SetAddress+0x42>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f002 fea9 	bl	8004e78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	70fb      	strb	r3, [r7, #3]
 800214a:	460b      	mov	r3, r1
 800214c:	803b      	strh	r3, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da0f      	bge.n	800217e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 020f 	and.w	r2, r3, #15
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3338      	adds	r3, #56	; 0x38
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	705a      	strb	r2, [r3, #1]
 800217c:	e00f      	b.n	800219e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021aa:	883a      	ldrh	r2, [r7, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	78ba      	ldrb	r2, [r7, #2]
 80021b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021c8:	78bb      	ldrb	r3, [r7, #2]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d102      	bne.n	80021d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_EP_Open+0xaa>
 80021de:	2302      	movs	r3, #2
 80021e0:	e00e      	b.n	8002200 <HAL_PCD_EP_Open+0xc8>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 ff29 	bl	8004048 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80021fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002218:	2b00      	cmp	r3, #0
 800221a:	da0f      	bge.n	800223c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	3338      	adds	r3, #56	; 0x38
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	3304      	adds	r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	705a      	strb	r2, [r3, #1]
 800223a:	e00f      	b.n	800225c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 020f 	and.w	r2, r3, #15
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	b2da      	uxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_PCD_EP_Close+0x6e>
 8002272:	2302      	movs	r3, #2
 8002274:	e00e      	b.n	8002294 <HAL_PCD_EP_Close+0x8c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f001 ff67 	bl	8004158 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	460b      	mov	r3, r1
 80022aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2200      	movs	r2, #0
 80022dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	6979      	ldr	r1, [r7, #20]
 8002310:	f002 fa46 	bl	80047a0 <USB_EP0StartXfer>
 8002314:	e008      	b.n	8002328 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	6979      	ldr	r1, [r7, #20]
 8002324:	f001 fff4 	bl	8004310 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002354:	681b      	ldr	r3, [r3, #0]
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	460b      	mov	r3, r1
 8002370:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002372:	7afb      	ldrb	r3, [r7, #11]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3338      	adds	r3, #56	; 0x38
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2201      	movs	r2, #1
 80023a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	f002 f9e4 	bl	80047a0 <USB_EP0StartXfer>
 80023d8:	e008      	b.n	80023ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	f001 ff92 	bl	8004310 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d901      	bls.n	8002414 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e050      	b.n	80024b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da0f      	bge.n	800243c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3338      	adds	r3, #56	; 0x38
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
 800243a:	e00d      	b.n	8002458 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_PCD_EP_SetStall+0x82>
 8002474:	2302      	movs	r3, #2
 8002476:	e01e      	b.n	80024b6 <HAL_PCD_EP_SetStall+0xc0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fc22 	bl	8004cd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	b2d9      	uxtb	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a6:	461a      	mov	r2, r3
 80024a8:	f002 fe12 	bl	80050d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d901      	bls.n	80024dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e042      	b.n	8002562 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	da0f      	bge.n	8002504 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	3338      	adds	r3, #56	; 0x38
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
 8002502:	e00f      	b.n	8002524 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_PCD_EP_ClrStall+0x86>
 8002540:	2302      	movs	r3, #2
 8002542:	e00e      	b.n	8002562 <HAL_PCD_EP_ClrStall+0xa4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fc2a 	bl	8004dac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	da0c      	bge.n	8002598 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	3338      	adds	r3, #56	; 0x38
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	3304      	adds	r3, #4
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e00c      	b.n	80025b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 020f 	and.w	r2, r3, #15
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fa49 	bl	8004a50 <USB_EPStopXfer>
 80025be:	4603      	mov	r3, r0
 80025c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025c2:	7afb      	ldrb	r3, [r7, #11]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	3338      	adds	r3, #56	; 0x38
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d901      	bls.n	8002604 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e06c      	b.n	80026de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	429a      	cmp	r2, r3
 8002618:	d902      	bls.n	8002620 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3303      	adds	r3, #3
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002628:	e02b      	b.n	8002682 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	d902      	bls.n	8002646 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3303      	adds	r3, #3
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6919      	ldr	r1, [r3, #16]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800265e:	b2db      	uxtb	r3, r3
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	4603      	mov	r3, r0
 8002664:	6978      	ldr	r0, [r7, #20]
 8002666:	f002 fa9d 	bl	8004ba4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	441a      	add	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	441a      	add	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	429a      	cmp	r2, r3
 8002696:	d809      	bhi.n	80026ac <PCD_WriteEmptyTxFifo+0xe0>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d203      	bcs.n	80026ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1be      	bne.n	800262a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d811      	bhi.n	80026dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	2201      	movs	r2, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026d8:	4013      	ands	r3, r2
 80026da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	333c      	adds	r3, #60	; 0x3c
 8002700:	3304      	adds	r3, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d17b      	bne.n	8002816 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4a61      	ldr	r2, [pc, #388]	; (80028b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	f240 80b9 	bls.w	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80b3 	beq.w	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274a:	461a      	mov	r2, r3
 800274c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002750:	6093      	str	r3, [r2, #8]
 8002752:	e0a7      	b.n	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276a:	461a      	mov	r2, r3
 800276c:	2320      	movs	r3, #32
 800276e:	6093      	str	r3, [r2, #8]
 8002770:	e098      	b.n	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	f040 8093 	bne.w	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4a4b      	ldr	r2, [pc, #300]	; (80028b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d90f      	bls.n	80027a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279c:	461a      	mov	r2, r3
 800279e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a2:	6093      	str	r3, [r2, #8]
 80027a4:	e07e      	b.n	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	0159      	lsls	r1, r3, #5
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	1ad2      	subs	r2, r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d114      	bne.n	8002808 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027f0:	461a      	mov	r2, r3
 80027f2:	2101      	movs	r1, #1
 80027f4:	f002 fc6c 	bl	80050d0 <USB_EP0_OutStart>
 80027f8:	e006      	b.n	8002808 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f004 ff3c 	bl	800768c <HAL_PCD_DataOutStageCallback>
 8002814:	e046      	b.n	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d124      	bne.n	8002868 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800283a:	6093      	str	r3, [r2, #8]
 800283c:	e032      	b.n	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2320      	movs	r3, #32
 8002858:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f004 ff13 	bl	800768c <HAL_PCD_DataOutStageCallback>
 8002866:	e01d      	b.n	80028a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d114      	bne.n	8002898 <PCD_EP_OutXfrComplete_int+0x1b0>
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d108      	bne.n	8002898 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002890:	461a      	mov	r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	f002 fc1c 	bl	80050d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f004 fef4 	bl	800768c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	4f54300a 	.word	0x4f54300a
 80028b4:	4f54310a 	.word	0x4f54310a

080028b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	333c      	adds	r3, #60	; 0x3c
 80028d0:	3304      	adds	r3, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <PCD_EP_OutSetupPacket_int+0x88>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d90e      	bls.n	800290c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002904:	461a      	mov	r2, r3
 8002906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f004 feab 	bl	8007668 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <PCD_EP_OutSetupPacket_int+0x88>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d90c      	bls.n	8002934 <PCD_EP_OutSetupPacket_int+0x7c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800292c:	461a      	mov	r2, r3
 800292e:	2101      	movs	r1, #1
 8002930:	f002 fbce 	bl	80050d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	4f54300a 	.word	0x4f54300a

08002944 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
 8002950:	4613      	mov	r3, r2
 8002952:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002962:	883b      	ldrh	r3, [r7, #0]
 8002964:	0419      	lsls	r1, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	430a      	orrs	r2, r1
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
 8002970:	e028      	b.n	80029c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4413      	add	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e00d      	b.n	80029a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	3340      	adds	r3, #64	; 0x40
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	3301      	adds	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3ec      	bcc.n	8002986 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029ac:	883b      	ldrh	r3, [r7, #0]
 80029ae:	0418      	lsls	r0, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	4302      	orrs	r2, r0
 80029bc:	3340      	adds	r3, #64	; 0x40
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e267      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d075      	beq.n	8002b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2a:	4b88      	ldr	r3, [pc, #544]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d00c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a36:	4b85      	ldr	r3, [pc, #532]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d112      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a42:	4b82      	ldr	r3, [pc, #520]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	4b7e      	ldr	r3, [pc, #504]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05b      	beq.n	8002b14 <HAL_RCC_OscConfig+0x108>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d157      	bne.n	8002b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e242      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x74>
 8002a72:	4b76      	ldr	r3, [pc, #472]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e01d      	b.n	8002abc <HAL_RCC_OscConfig+0xb0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x98>
 8002a8a:	4b70      	ldr	r3, [pc, #448]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6f      	ldr	r2, [pc, #444]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b6d      	ldr	r3, [pc, #436]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6c      	ldr	r2, [pc, #432]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0xb0>
 8002aa4:	4b69      	ldr	r3, [pc, #420]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a68      	ldr	r2, [pc, #416]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a65      	ldr	r2, [pc, #404]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fa46 	bl	8000f54 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fa42 	bl	8000f54 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e207      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b5b      	ldr	r3, [pc, #364]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0xc0>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fa32 	bl	8000f54 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fa2e 	bl	8000f54 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1f3      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	4b51      	ldr	r3, [pc, #324]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0xe8>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d063      	beq.n	8002bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b22:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3a:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	4b41      	ldr	r3, [pc, #260]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x152>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1c7      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4937      	ldr	r1, [pc, #220]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	e03a      	b.n	8002bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_OscConfig+0x244>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe f9e7 	bl	8000f54 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fe f9e3 	bl	8000f54 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1a8      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4925      	ldr	r1, [pc, #148]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_OscConfig+0x244>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f9c6 	bl	8000f54 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fe f9c2 	bl	8000f54 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e187      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d036      	beq.n	8002c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_RCC_OscConfig+0x248>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe f9a6 	bl	8000f54 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe f9a2 	bl	8000f54 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e167      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x200>
 8002c2a:	e01b      	b.n	8002c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_OscConfig+0x248>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7fe f98f 	bl	8000f54 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe f98b 	bl	8000f54 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d907      	bls.n	8002c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e150      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	42470000 	.word	0x42470000
 8002c54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	4b88      	ldr	r3, [pc, #544]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ea      	bne.n	8002c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8097 	beq.w	8002da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	4b7d      	ldr	r3, [pc, #500]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a7c      	ldr	r2, [pc, #496]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b7a      	ldr	r3, [pc, #488]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b77      	ldr	r3, [pc, #476]	; (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cae:	4b74      	ldr	r3, [pc, #464]	; (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a73      	ldr	r2, [pc, #460]	; (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7fe f94b 	bl	8000f54 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe f947 	bl	8000f54 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e10c      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2ea>
 8002ce8:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x324>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x30c>
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a5e      	ldr	r2, [pc, #376]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a5b      	ldr	r2, [pc, #364]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x324>
 8002d18:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a54      	ldr	r2, [pc, #336]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d2a:	f023 0304 	bic.w	r3, r3, #4
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe f90c 	bl	8000f54 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe f908 	bl	8000f54 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0cb      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0ee      	beq.n	8002d40 <HAL_RCC_OscConfig+0x334>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d64:	f7fe f8f6 	bl	8000f54 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe f8f2 	bl	8000f54 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0b5      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ee      	bne.n	8002d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	4a38      	ldr	r2, [pc, #224]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a1 	beq.w	8002eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002daa:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d05c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d141      	bne.n	8002e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f8c6 	bl	8000f54 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe f8c2 	bl	8000f54 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e087      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	491b      	ldr	r1, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe f89b 	bl	8000f54 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fe f897 	bl	8000f54 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e05c      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x416>
 8002e40:	e054      	b.n	8002eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe f884 	bl	8000f54 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe f880 	bl	8000f54 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e045      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x444>
 8002e6e:	e03d      	b.n	8002eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e038      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000
 8002e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_RCC_OscConfig+0x4ec>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d121      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800

08002efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0cc      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b68      	ldr	r3, [pc, #416]	; (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d90c      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a58      	ldr	r2, [pc, #352]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	494d      	ldr	r1, [pc, #308]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d044      	beq.n	800301c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d119      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e07f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e067      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4934      	ldr	r1, [pc, #208]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fec:	f7fd ffb2 	bl	8000f54 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fd ffae 	bl	8000f54 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e04f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 020c 	and.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d1eb      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d20c      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e032      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4916      	ldr	r1, [pc, #88]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	490e      	ldr	r1, [pc, #56]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003082:	f000 f821 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003086:	4602      	mov	r2, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	490a      	ldr	r1, [pc, #40]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd ff12 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08008694 	.word	0x08008694
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b094      	sub	sp, #80	; 0x50
 80030ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	647b      	str	r3, [r7, #68]	; 0x44
 80030d4:	2300      	movs	r3, #0
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d8:	2300      	movs	r3, #0
 80030da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e0:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d00d      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x40>
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	f200 80e1 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x34>
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x3a>
 80030fa:	e0db      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b73      	ldr	r3, [pc, #460]	; (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003100:	e0db      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003102:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003106:	e0d8      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003112:	4b6d      	ldr	r3, [pc, #436]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311e:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	2200      	movs	r2, #0
 8003126:	63bb      	str	r3, [r7, #56]	; 0x38
 8003128:	63fa      	str	r2, [r7, #60]	; 0x3c
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
 8003136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800313a:	4622      	mov	r2, r4
 800313c:	462b      	mov	r3, r5
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	0159      	lsls	r1, r3, #5
 8003148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314c:	0150      	lsls	r0, r2, #5
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4621      	mov	r1, r4
 8003154:	1a51      	subs	r1, r2, r1
 8003156:	6139      	str	r1, [r7, #16]
 8003158:	4629      	mov	r1, r5
 800315a:	eb63 0301 	sbc.w	r3, r3, r1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800316c:	4659      	mov	r1, fp
 800316e:	018b      	lsls	r3, r1, #6
 8003170:	4651      	mov	r1, sl
 8003172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003176:	4651      	mov	r1, sl
 8003178:	018a      	lsls	r2, r1, #6
 800317a:	4651      	mov	r1, sl
 800317c:	ebb2 0801 	subs.w	r8, r2, r1
 8003180:	4659      	mov	r1, fp
 8003182:	eb63 0901 	sbc.w	r9, r3, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800319a:	4690      	mov	r8, r2
 800319c:	4699      	mov	r9, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	eb18 0303 	adds.w	r3, r8, r3
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	462b      	mov	r3, r5
 80031a8:	eb49 0303 	adc.w	r3, r9, r3
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ba:	4629      	mov	r1, r5
 80031bc:	024b      	lsls	r3, r1, #9
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031c4:	4621      	mov	r1, r4
 80031c6:	024a      	lsls	r2, r1, #9
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d8:	f7fd f852 	bl	8000280 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e4:	e058      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	4611      	mov	r1, r2
 80031f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	0159      	lsls	r1, r3, #5
 800320e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003212:	0150      	lsls	r0, r2, #5
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4641      	mov	r1, r8
 800321a:	ebb2 0a01 	subs.w	sl, r2, r1
 800321e:	4649      	mov	r1, r9
 8003220:	eb63 0b01 	sbc.w	fp, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003238:	ebb2 040a 	subs.w	r4, r2, sl
 800323c:	eb63 050b 	sbc.w	r5, r3, fp
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	4643      	mov	r3, r8
 8003256:	18e3      	adds	r3, r4, r3
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	464b      	mov	r3, r9
 800325c:	eb45 0303 	adc.w	r3, r5, r3
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326e:	4629      	mov	r1, r5
 8003270:	028b      	lsls	r3, r1, #10
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003278:	4621      	mov	r1, r4
 800327a:	028a      	lsls	r2, r1, #10
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	61fa      	str	r2, [r7, #28]
 8003288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328c:	f7fc fff8 	bl	8000280 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3750      	adds	r7, #80	; 0x50
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000000 	.word	0x20000000

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e041      	b.n	8003382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fcf0 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 f95e 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e046      	b.n	8003432 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_TIM_Base_Start+0xb4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d022      	beq.n	80033fc <HAL_TIM_Base_Start+0x70>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d01d      	beq.n	80033fc <HAL_TIM_Base_Start+0x70>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_TIM_Base_Start+0xb8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <HAL_TIM_Base_Start+0x70>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <HAL_TIM_Base_Start+0xbc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_TIM_Base_Start+0x70>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_TIM_Base_Start+0xc0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_TIM_Base_Start+0x70>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIM_Base_Start+0xc4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_TIM_Base_Start+0x70>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_TIM_Base_Start+0xc8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_TIM_Base_Start+0x70>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIM_Base_Start+0xcc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d111      	bne.n	8003420 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d010      	beq.n	8003430 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	e007      	b.n	8003430 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40010000 	.word	0x40010000
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00
 8003450:	40010400 	.word	0x40010400
 8003454:	40014000 	.word	0x40014000
 8003458:	40001800 	.word	0x40001800

0800345c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIM_ConfigClockSource+0x1c>
 8003474:	2302      	movs	r3, #2
 8003476:	e0b4      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x186>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b0:	d03e      	beq.n	8003530 <HAL_TIM_ConfigClockSource+0xd4>
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b6:	f200 8087 	bhi.w	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034be:	f000 8086 	beq.w	80035ce <HAL_TIM_ConfigClockSource+0x172>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d87f      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b70      	cmp	r3, #112	; 0x70
 80034ca:	d01a      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0xa6>
 80034cc:	2b70      	cmp	r3, #112	; 0x70
 80034ce:	d87b      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b60      	cmp	r3, #96	; 0x60
 80034d2:	d050      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x11a>
 80034d4:	2b60      	cmp	r3, #96	; 0x60
 80034d6:	d877      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b50      	cmp	r3, #80	; 0x50
 80034da:	d03c      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0xfa>
 80034dc:	2b50      	cmp	r3, #80	; 0x50
 80034de:	d873      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d058      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x13a>
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d86f      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b30      	cmp	r3, #48	; 0x30
 80034ea:	d064      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 80034ec:	2b30      	cmp	r3, #48	; 0x30
 80034ee:	d86b      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d060      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d867      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d05c      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d05a      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003500:	e062      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6899      	ldr	r1, [r3, #8]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f000 f985 	bl	8003820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	609a      	str	r2, [r3, #8]
      break;
 800352e:	e04f      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f000 f96e 	bl	8003820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003552:	609a      	str	r2, [r3, #8]
      break;
 8003554:	e03c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	461a      	mov	r2, r3
 8003564:	f000 f8e2 	bl	800372c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2150      	movs	r1, #80	; 0x50
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f93b 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 8003574:	e02c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	461a      	mov	r2, r3
 8003584:	f000 f901 	bl	800378a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2160      	movs	r1, #96	; 0x60
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f92b 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 8003594:	e01c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f000 f8c2 	bl	800372c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f91b 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 80035b4:	e00c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 f912 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 80035c6:	e003      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e000      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <TIM_Base_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d00f      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3d      	ldr	r2, [pc, #244]	; (8003704 <TIM_Base_SetConfig+0x118>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00b      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3c      	ldr	r2, [pc, #240]	; (8003708 <TIM_Base_SetConfig+0x11c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3b      	ldr	r2, [pc, #236]	; (800370c <TIM_Base_SetConfig+0x120>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3a      	ldr	r2, [pc, #232]	; (8003710 <TIM_Base_SetConfig+0x124>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d108      	bne.n	800363e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <TIM_Base_SetConfig+0x114>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d027      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <TIM_Base_SetConfig+0x118>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d023      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <TIM_Base_SetConfig+0x11c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2a      	ldr	r2, [pc, #168]	; (800370c <TIM_Base_SetConfig+0x120>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a29      	ldr	r2, [pc, #164]	; (8003710 <TIM_Base_SetConfig+0x124>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d017      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a28      	ldr	r2, [pc, #160]	; (8003714 <TIM_Base_SetConfig+0x128>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <TIM_Base_SetConfig+0x12c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a26      	ldr	r2, [pc, #152]	; (800371c <TIM_Base_SetConfig+0x130>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a25      	ldr	r2, [pc, #148]	; (8003720 <TIM_Base_SetConfig+0x134>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a24      	ldr	r2, [pc, #144]	; (8003724 <TIM_Base_SetConfig+0x138>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a23      	ldr	r2, [pc, #140]	; (8003728 <TIM_Base_SetConfig+0x13c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <TIM_Base_SetConfig+0x114>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0xf8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <TIM_Base_SetConfig+0x124>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40010400 	.word	0x40010400
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800
 8003720:	40001800 	.word	0x40001800
 8003724:	40001c00 	.word	0x40001c00
 8003728:	40002000 	.word	0x40002000

0800372c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 030a 	bic.w	r3, r3, #10
 8003768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800378a:	b480      	push	{r7}
 800378c:	b087      	sub	sp, #28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0210 	bic.w	r2, r3, #16
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	031b      	lsls	r3, r3, #12
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	621a      	str	r2, [r3, #32]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	f043 0307 	orr.w	r3, r3, #7
 800380c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	021a      	lsls	r2, r3, #8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	431a      	orrs	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003874:	2302      	movs	r3, #2
 8003876:	e05a      	b.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d022      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d01d      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d018      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00e      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10c      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4313      	orrs	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40010400 	.word	0x40010400
 8003950:	40014000 	.word	0x40014000
 8003954:	40001800 	.word	0x40001800

08003958 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003958:	b084      	sub	sp, #16
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	f107 001c 	add.w	r0, r7, #28
 8003966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	2b01      	cmp	r3, #1
 800396e:	d122      	bne.n	80039b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f001 fbee 	bl	800518c <USB_CoreReset>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e01a      	b.n	80039ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f001 fbe2 	bl	800518c <USB_CoreReset>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
 80039de:	e005      	b.n	80039ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10b      	bne.n	8003a0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f043 0206 	orr.w	r2, r3, #6
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a16:	b004      	add	sp, #16
 8003a18:	4770      	bx	lr
	...

08003a1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d165      	bne.n	8003afc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4a41      	ldr	r2, [pc, #260]	; (8003b38 <USB_SetTurnaroundTime+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d906      	bls.n	8003a46 <USB_SetTurnaroundTime+0x2a>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4a40      	ldr	r2, [pc, #256]	; (8003b3c <USB_SetTurnaroundTime+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d202      	bcs.n	8003a46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a40:	230f      	movs	r3, #15
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e062      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <USB_SetTurnaroundTime+0x120>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d306      	bcc.n	8003a5c <USB_SetTurnaroundTime+0x40>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <USB_SetTurnaroundTime+0x124>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d202      	bcs.n	8003a5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a56:	230e      	movs	r3, #14
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e057      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4a38      	ldr	r2, [pc, #224]	; (8003b40 <USB_SetTurnaroundTime+0x124>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d306      	bcc.n	8003a72 <USB_SetTurnaroundTime+0x56>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a37      	ldr	r2, [pc, #220]	; (8003b44 <USB_SetTurnaroundTime+0x128>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d202      	bcs.n	8003a72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a6c:	230d      	movs	r3, #13
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e04c      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a33      	ldr	r2, [pc, #204]	; (8003b44 <USB_SetTurnaroundTime+0x128>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d306      	bcc.n	8003a88 <USB_SetTurnaroundTime+0x6c>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4a32      	ldr	r2, [pc, #200]	; (8003b48 <USB_SetTurnaroundTime+0x12c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d802      	bhi.n	8003a88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a82:	230c      	movs	r3, #12
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e041      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <USB_SetTurnaroundTime+0x12c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d906      	bls.n	8003a9e <USB_SetTurnaroundTime+0x82>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4a2e      	ldr	r2, [pc, #184]	; (8003b4c <USB_SetTurnaroundTime+0x130>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d802      	bhi.n	8003a9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a98:	230b      	movs	r3, #11
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e036      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <USB_SetTurnaroundTime+0x130>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d906      	bls.n	8003ab4 <USB_SetTurnaroundTime+0x98>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <USB_SetTurnaroundTime+0x134>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d802      	bhi.n	8003ab4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003aae:	230a      	movs	r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e02b      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <USB_SetTurnaroundTime+0x134>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d906      	bls.n	8003aca <USB_SetTurnaroundTime+0xae>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <USB_SetTurnaroundTime+0x138>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d202      	bcs.n	8003aca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ac4:	2309      	movs	r3, #9
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e020      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <USB_SetTurnaroundTime+0x138>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d306      	bcc.n	8003ae0 <USB_SetTurnaroundTime+0xc4>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <USB_SetTurnaroundTime+0x13c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d802      	bhi.n	8003ae0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ada:	2308      	movs	r3, #8
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e015      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <USB_SetTurnaroundTime+0x13c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d906      	bls.n	8003af6 <USB_SetTurnaroundTime+0xda>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <USB_SetTurnaroundTime+0x140>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d202      	bcs.n	8003af6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003af0:	2307      	movs	r3, #7
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e00a      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003af6:	2306      	movs	r3, #6
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e007      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b02:	2309      	movs	r3, #9
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e001      	b.n	8003b0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b08:	2309      	movs	r3, #9
 8003b0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	029b      	lsls	r3, r3, #10
 8003b20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	00d8acbf 	.word	0x00d8acbf
 8003b3c:	00e4e1c0 	.word	0x00e4e1c0
 8003b40:	00f42400 	.word	0x00f42400
 8003b44:	01067380 	.word	0x01067380
 8003b48:	011a499f 	.word	0x011a499f
 8003b4c:	01312cff 	.word	0x01312cff
 8003b50:	014ca43f 	.word	0x014ca43f
 8003b54:	016e3600 	.word	0x016e3600
 8003b58:	01a6ab1f 	.word	0x01a6ab1f
 8003b5c:	01e84800 	.word	0x01e84800

08003b60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d115      	bne.n	8003bf2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f7fd f9ca 	bl	8000f6c <HAL_Delay>
      ms++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f001 fa45 	bl	800506e <USB_GetMode>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d01e      	beq.n	8003c28 <USB_SetCurrentMode+0x84>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b31      	cmp	r3, #49	; 0x31
 8003bee:	d9f0      	bls.n	8003bd2 <USB_SetCurrentMode+0x2e>
 8003bf0:	e01a      	b.n	8003c28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d115      	bne.n	8003c24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f7fd f9b1 	bl	8000f6c <HAL_Delay>
      ms++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f001 fa2c 	bl	800506e <USB_GetMode>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <USB_SetCurrentMode+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b31      	cmp	r3, #49	; 0x31
 8003c20:	d9f0      	bls.n	8003c04 <USB_SetCurrentMode+0x60>
 8003c22:	e001      	b.n	8003c28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e005      	b.n	8003c34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b32      	cmp	r3, #50	; 0x32
 8003c2c:	d101      	bne.n	8003c32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	e009      	b.n	8003c70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	3340      	adds	r3, #64	; 0x40
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b0e      	cmp	r3, #14
 8003c74:	d9f2      	bls.n	8003c5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11c      	bne.n	8003cb6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8003cb4:	e00b      	b.n	8003cce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce8:	461a      	mov	r2, r3
 8003cea:	680b      	ldr	r3, [r1, #0]
 8003cec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10c      	bne.n	8003d0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d104      	bne.n	8003d04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f965 	bl	8003fcc <USB_SetDevSpeed>
 8003d02:	e008      	b.n	8003d16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d04:	2101      	movs	r1, #1
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f960 	bl	8003fcc <USB_SetDevSpeed>
 8003d0c:	e003      	b.n	8003d16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d0e:	2103      	movs	r1, #3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f95b 	bl	8003fcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d16:	2110      	movs	r1, #16
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8f3 	bl	8003f04 <USB_FlushTxFifo>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f91f 	bl	8003f6c <USB_FlushRxFifo>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2300      	movs	r3, #0
 8003d42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	461a      	mov	r2, r3
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e043      	b.n	8003dea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d78:	d118      	bne.n	8003dac <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e013      	b.n	8003dbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	461a      	mov	r2, r3
 8003da4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e008      	b.n	8003dbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	461a      	mov	r2, r3
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2300      	movs	r3, #0
 8003dce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003de2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	3301      	adds	r3, #1
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d3b7      	bcc.n	8003d62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	e043      	b.n	8003e80 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e0e:	d118      	bne.n	8003e42 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	461a      	mov	r2, r3
 8003e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e013      	b.n	8003e54 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e008      	b.n	8003e54 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2300      	movs	r3, #0
 8003e52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	2300      	movs	r3, #0
 8003e64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	461a      	mov	r2, r3
 8003e74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d3b7      	bcc.n	8003df8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ea8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f043 0210 	orr.w	r2, r3, #16
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <USB_DevInit+0x2c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f043 0208 	orr.w	r2, r3, #8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d107      	bne.n	8003ef0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003efc:	b004      	add	sp, #16
 8003efe:	4770      	bx	lr
 8003f00:	803c3800 	.word	0x803c3800

08003f04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3301      	adds	r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <USB_FlushTxFifo+0x64>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e01b      	b.n	8003f5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	daf2      	bge.n	8003f12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	019b      	lsls	r3, r3, #6
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a08      	ldr	r2, [pc, #32]	; (8003f68 <USB_FlushTxFifo+0x64>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e006      	b.n	8003f5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d0f0      	beq.n	8003f3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	00030d40 	.word	0x00030d40

08003f6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <USB_FlushRxFifo+0x5c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e018      	b.n	8003fbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	daf2      	bge.n	8003f78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <USB_FlushRxFifo+0x5c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e006      	b.n	8003fbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d0f0      	beq.n	8003f9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	00030d40 	.word	0x00030d40

08003fcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b087      	sub	sp, #28
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
 8004022:	e00a      	b.n	800403a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d002      	beq.n	8004030 <USB_GetDevSpeed+0x32>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b06      	cmp	r3, #6
 800402e:	d102      	bne.n	8004036 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004030:	2302      	movs	r3, #2
 8004032:	75fb      	strb	r3, [r7, #23]
 8004034:	e001      	b.n	800403a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004036:	230f      	movs	r3, #15
 8004038:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d13a      	bne.n	80040da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	b29b      	uxth	r3, r3
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004082:	4313      	orrs	r3, r2
 8004084:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d155      	bne.n	8004148 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	791b      	ldrb	r3, [r3, #4]
 80040b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	059b      	lsls	r3, r3, #22
 80040be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040c0:	4313      	orrs	r3, r2
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e036      	b.n	8004148 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11a      	bne.n	8004148 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	791b      	ldrb	r3, [r3, #4]
 800412c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800412e:	430b      	orrs	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004146:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d161      	bne.n	8004238 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800418a:	d11f      	bne.n	80041cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	0151      	lsls	r1, r2, #5
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	440a      	add	r2, r1
 80041a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ec:	4013      	ands	r3, r2
 80041ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	b29b      	uxth	r3, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004210:	4013      	ands	r3, r2
 8004212:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	0159      	lsls	r1, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	440b      	add	r3, r1
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	4619      	mov	r1, r3
 8004230:	4b35      	ldr	r3, [pc, #212]	; (8004308 <USB_DeactivateEndpoint+0x1b0>)
 8004232:	4013      	ands	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
 8004236:	e060      	b.n	80042fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800424a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800424e:	d11f      	bne.n	8004290 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	440a      	add	r2, r1
 8004266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800426e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	0151      	lsls	r1, r2, #5
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	440a      	add	r2, r1
 8004286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800428a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800428e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	2101      	movs	r1, #1
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	43db      	mvns	r3, r3
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b0:	4013      	ands	r3, r2
 80042b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	43db      	mvns	r3, r3
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d4:	4013      	ands	r3, r2
 80042d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	0159      	lsls	r1, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	4619      	mov	r1, r3
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <USB_DeactivateEndpoint+0x1b4>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	ec337800 	.word	0xec337800
 800430c:	eff37800 	.word	0xeff37800

08004310 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b01      	cmp	r3, #1
 800432e:	f040 815c 	bne.w	80045ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d132      	bne.n	80043a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004354:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004358:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800435c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800437c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004398:	0cdb      	lsrs	r3, r3, #19
 800439a:	04db      	lsls	r3, r3, #19
 800439c:	6113      	str	r3, [r2, #16]
 800439e:	e074      	b.n	800448a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ba:	0cdb      	lsrs	r3, r3, #19
 80043bc:	04db      	lsls	r3, r3, #19
 80043be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	440b      	add	r3, r1
 80043fc:	1e59      	subs	r1, r3, #1
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	fbb1 f3f3 	udiv	r3, r1, r3
 8004406:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004408:	4b9d      	ldr	r3, [pc, #628]	; (8004680 <USB_EPStartXfer+0x370>)
 800440a:	400b      	ands	r3, r1
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	0148      	lsls	r0, r1, #5
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	4401      	add	r1, r0
 8004414:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004418:	4313      	orrs	r3, r2
 800441a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	69b9      	ldr	r1, [r7, #24]
 8004434:	0148      	lsls	r0, r1, #5
 8004436:	69f9      	ldr	r1, [r7, #28]
 8004438:	4401      	add	r1, r0
 800443a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	791b      	ldrb	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d11f      	bne.n	800448a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004468:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004488:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d14b      	bne.n	8004528 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	791b      	ldrb	r3, [r3, #4]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d128      	bne.n	8004506 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d110      	bne.n	80044e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e00f      	b.n	8004506 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004504:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	0151      	lsls	r1, r2, #5
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	440a      	add	r2, r1
 800451c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e133      	b.n	8004790 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004546:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	791b      	ldrb	r3, [r3, #4]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d015      	beq.n	800457c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 811b 	beq.w	8004790 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	2101      	movs	r1, #1
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	69f9      	ldr	r1, [r7, #28]
 8004572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004576:	4313      	orrs	r3, r2
 8004578:	634b      	str	r3, [r1, #52]	; 0x34
 800457a:	e109      	b.n	8004790 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d110      	bne.n	80045ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e00f      	b.n	80045ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	b298      	uxth	r0, r3
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4603      	mov	r3, r0
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fade 	bl	8004ba4 <USB_WritePacket>
 80045e8:	e0d2      	b.n	8004790 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004604:	0cdb      	lsrs	r3, r3, #19
 8004606:	04db      	lsls	r3, r3, #19
 8004608:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	440a      	add	r2, r1
 8004620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800462c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d126      	bne.n	8004684 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	0148      	lsls	r0, r1, #5
 8004650:	69f9      	ldr	r1, [r7, #28]
 8004652:	4401      	add	r1, r0
 8004654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004658:	4313      	orrs	r3, r2
 800465a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800467a:	6113      	str	r3, [r2, #16]
 800467c:	e03a      	b.n	80046f4 <USB_EPStartXfer+0x3e4>
 800467e:	bf00      	nop
 8004680:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4413      	add	r3, r2
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	8afa      	ldrh	r2, [r7, #22]
 80046a0:	fb03 f202 	mul.w	r2, r3, r2
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	8afb      	ldrh	r3, [r7, #22]
 80046b8:	04d9      	lsls	r1, r3, #19
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <USB_EPStartXfer+0x48c>)
 80046bc:	400b      	ands	r3, r1
 80046be:	69b9      	ldr	r1, [r7, #24]
 80046c0:	0148      	lsls	r0, r1, #5
 80046c2:	69f9      	ldr	r1, [r7, #28]
 80046c4:	4401      	add	r1, r0
 80046c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046ca:	4313      	orrs	r3, r2
 80046cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	0148      	lsls	r0, r1, #5
 80046e8:	69f9      	ldr	r1, [r7, #28]
 80046ea:	4401      	add	r1, r0
 80046ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046f0:	4313      	orrs	r3, r2
 80046f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10d      	bne.n	8004716 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6919      	ldr	r1, [r3, #16]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	460a      	mov	r2, r1
 8004714:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	791b      	ldrb	r3, [r3, #4]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d128      	bne.n	8004770 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d110      	bne.n	8004750 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	440a      	add	r2, r1
 8004744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e00f      	b.n	8004770 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800478e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	1ff80000 	.word	0x1ff80000

080047a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 80ce 	bne.w	800495e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d132      	bne.n	8004830 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	440a      	add	r2, r1
 8004804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800480c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004828:	0cdb      	lsrs	r3, r3, #19
 800482a:	04db      	lsls	r3, r3, #19
 800482c:	6113      	str	r3, [r2, #16]
 800482e:	e04e      	b.n	80048ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	0cdb      	lsrs	r3, r3, #19
 800484c:	04db      	lsls	r3, r3, #19
 800484e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800486e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004872:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	429a      	cmp	r2, r3
 800487e:	d903      	bls.n	8004888 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048be:	6939      	ldr	r1, [r7, #16]
 80048c0:	0148      	lsls	r0, r1, #5
 80048c2:	6979      	ldr	r1, [r7, #20]
 80048c4:	4401      	add	r1, r0
 80048c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048ca:	4313      	orrs	r3, r2
 80048cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d11e      	bne.n	8004912 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	440a      	add	r2, r1
 8004906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e097      	b.n	8004a42 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004930:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8083 	beq.w	8004a42 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	2101      	movs	r1, #1
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004958:	4313      	orrs	r3, r2
 800495a:	634b      	str	r3, [r1, #52]	; 0x34
 800495c:	e071      	b.n	8004a42 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004978:	0cdb      	lsrs	r3, r3, #19
 800497a:	04db      	lsls	r3, r3, #19
 800497c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	440a      	add	r2, r1
 8004994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800499c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f0:	6939      	ldr	r1, [r7, #16]
 80049f2:	0148      	lsls	r0, r1, #5
 80049f4:	6979      	ldr	r1, [r7, #20]
 80049f6:	4401      	add	r1, r0
 80049f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049fc:	4313      	orrs	r3, r2
 80049fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10d      	bne.n	8004a22 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6919      	ldr	r1, [r3, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	460a      	mov	r2, r1
 8004a20:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d14a      	bne.n	8004b04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a86:	f040 8086 	bne.w	8004b96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d902      	bls.n	8004ae8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ae6:	e056      	b.n	8004b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b00:	d0e7      	beq.n	8004ad2 <USB_EPStopXfer+0x82>
 8004b02:	e048      	b.n	8004b96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1c:	d13b      	bne.n	8004b96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d902      	bls.n	8004b7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
          break;
 8004b7a:	e00c      	b.n	8004b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b94:	d0e7      	beq.n	8004b66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	71fb      	strb	r3, [r7, #7]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d123      	bne.n	8004c12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bca:	88bb      	ldrh	r3, [r7, #4]
 8004bcc:	3303      	adds	r3, #3
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e018      	b.n	8004c0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	031a      	lsls	r2, r3, #12
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be4:	461a      	mov	r2, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3301      	adds	r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	3301      	adds	r3, #1
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d3e2      	bcc.n	8004bd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3724      	adds	r7, #36	; 0x24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b08b      	sub	sp, #44	; 0x2c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	e014      	b.n	8004c76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	3301      	adds	r3, #1
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	3301      	adds	r3, #1
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	3301      	adds	r3, #1
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	6a3a      	ldr	r2, [r7, #32]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3e6      	bcc.n	8004c4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c7e:	8bfb      	ldrh	r3, [r7, #30]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01e      	beq.n	8004cc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f107 0310 	add.w	r3, r7, #16
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	701a      	strb	r2, [r3, #0]
      i++;
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	3301      	adds	r3, #1
 8004cae:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cb6:	8bfb      	ldrh	r3, [r7, #30]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cbc:	8bfb      	ldrh	r3, [r7, #30]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1ea      	bne.n	8004c98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	372c      	adds	r7, #44	; 0x2c
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d12c      	bne.n	8004d46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db12      	blt.n	8004d24 <USB_EPSetStall+0x54>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00f      	beq.n	8004d24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e02b      	b.n	8004d9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	db12      	blt.n	8004d7e <USB_EPSetStall+0xae>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00f      	beq.n	8004d7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d128      	bne.n	8004e1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004de6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	791b      	ldrb	r3, [r3, #4]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d003      	beq.n	8004df8 <USB_EPClearStall+0x4c>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	791b      	ldrb	r3, [r3, #4]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d138      	bne.n	8004e6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e027      	b.n	8004e6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	791b      	ldrb	r3, [r3, #4]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d003      	beq.n	8004e4a <USB_EPClearStall+0x9e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d10f      	bne.n	8004e6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef2:	f023 0302 	bic.w	r3, r3, #2
 8004ef6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f20:	f023 0303 	bic.w	r3, r3, #3
 8004f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f60:	68fb      	ldr	r3, [r7, #12]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	0c1b      	lsrs	r3, r3, #16
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	b29b      	uxth	r3, r3
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005004:	68bb      	ldr	r3, [r7, #8]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	01db      	lsls	r3, r3, #7
 8005044:	b2db      	uxtb	r3, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4013      	ands	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005060:	68bb      	ldr	r3, [r7, #8]
}
 8005062:	4618      	mov	r0, r3
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0301 	and.w	r3, r3, #1
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050a8:	f023 0307 	bic.w	r3, r3, #7
 80050ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	460b      	mov	r3, r1
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	333c      	adds	r3, #60	; 0x3c
 80050e6:	3304      	adds	r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4a26      	ldr	r2, [pc, #152]	; (8005188 <USB_EP0_OutStart+0xb8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d90a      	bls.n	800510a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005104:	d101      	bne.n	800510a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e037      	b.n	800517a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	461a      	mov	r2, r3
 8005112:	2300      	movs	r3, #0
 8005114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005138:	f043 0318 	orr.w	r3, r3, #24
 800513c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005150:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005152:	7afb      	ldrb	r3, [r7, #11]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10f      	bne.n	8005178 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005172:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	4f54300a 	.word	0x4f54300a

0800518c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <USB_CoreReset+0x64>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e01b      	b.n	80051e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	daf2      	bge.n	8005198 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <USB_CoreReset+0x64>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d901      	bls.n	80051d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e006      	b.n	80051e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d0f0      	beq.n	80051c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	00030d40 	.word	0x00030d40

080051f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005200:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005204:	f002 fcac 	bl	8007b60 <USBD_static_malloc>
 8005208:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	32b0      	adds	r2, #176	; 0xb0
 800521a:	2100      	movs	r1, #0
 800521c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005220:	2302      	movs	r3, #2
 8005222:	e0d4      	b.n	80053ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005224:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005228:	2100      	movs	r1, #0
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f002 fcfc 	bl	8007c28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	32b0      	adds	r2, #176	; 0xb0
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	32b0      	adds	r2, #176	; 0xb0
 800524a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7c1b      	ldrb	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d138      	bne.n	80052ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800525c:	4b5e      	ldr	r3, [pc, #376]	; (80053d8 <USBD_CDC_Init+0x1e4>)
 800525e:	7819      	ldrb	r1, [r3, #0]
 8005260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005264:	2202      	movs	r2, #2
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f002 fb57 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800526c:	4b5a      	ldr	r3, [pc, #360]	; (80053d8 <USBD_CDC_Init+0x1e4>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3324      	adds	r3, #36	; 0x24
 8005282:	2201      	movs	r2, #1
 8005284:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005286:	4b55      	ldr	r3, [pc, #340]	; (80053dc <USBD_CDC_Init+0x1e8>)
 8005288:	7819      	ldrb	r1, [r3, #0]
 800528a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800528e:	2202      	movs	r2, #2
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f002 fb42 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005296:	4b51      	ldr	r3, [pc, #324]	; (80053dc <USBD_CDC_Init+0x1e8>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f003 020f 	and.w	r2, r3, #15
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052ae:	2201      	movs	r2, #1
 80052b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052b2:	4b4b      	ldr	r3, [pc, #300]	; (80053e0 <USBD_CDC_Init+0x1ec>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f003 020f 	and.w	r2, r3, #15
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3326      	adds	r3, #38	; 0x26
 80052c8:	2210      	movs	r2, #16
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e035      	b.n	800533a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052ce:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <USBD_CDC_Init+0x1e4>)
 80052d0:	7819      	ldrb	r1, [r3, #0]
 80052d2:	2340      	movs	r3, #64	; 0x40
 80052d4:	2202      	movs	r2, #2
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f002 fb1f 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052dc:	4b3e      	ldr	r3, [pc, #248]	; (80053d8 <USBD_CDC_Init+0x1e4>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3324      	adds	r3, #36	; 0x24
 80052f2:	2201      	movs	r2, #1
 80052f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052f6:	4b39      	ldr	r3, [pc, #228]	; (80053dc <USBD_CDC_Init+0x1e8>)
 80052f8:	7819      	ldrb	r1, [r3, #0]
 80052fa:	2340      	movs	r3, #64	; 0x40
 80052fc:	2202      	movs	r2, #2
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f002 fb0b 	bl	800791a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005304:	4b35      	ldr	r3, [pc, #212]	; (80053dc <USBD_CDC_Init+0x1e8>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800531c:	2201      	movs	r2, #1
 800531e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005320:	4b2f      	ldr	r3, [pc, #188]	; (80053e0 <USBD_CDC_Init+0x1ec>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f003 020f 	and.w	r2, r3, #15
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	3326      	adds	r3, #38	; 0x26
 8005336:	2210      	movs	r2, #16
 8005338:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800533a:	4b29      	ldr	r3, [pc, #164]	; (80053e0 <USBD_CDC_Init+0x1ec>)
 800533c:	7819      	ldrb	r1, [r3, #0]
 800533e:	2308      	movs	r3, #8
 8005340:	2203      	movs	r2, #3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f002 fae9 	bl	800791a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <USBD_CDC_Init+0x1ec>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	3324      	adds	r3, #36	; 0x24
 800535e:	2201      	movs	r2, #1
 8005360:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	33b0      	adds	r3, #176	; 0xb0
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005398:	2302      	movs	r3, #2
 800539a:	e018      	b.n	80053ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7c1b      	ldrb	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053a4:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <USBD_CDC_Init+0x1e8>)
 80053a6:	7819      	ldrb	r1, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f002 fba0 	bl	8007af8 <USBD_LL_PrepareReceive>
 80053b8:	e008      	b.n	80053cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <USBD_CDC_Init+0x1e8>)
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f002 fb96 	bl	8007af8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000093 	.word	0x20000093
 80053dc:	20000094 	.word	0x20000094
 80053e0:	20000095 	.word	0x20000095

080053e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80053f0:	4b3a      	ldr	r3, [pc, #232]	; (80054dc <USBD_CDC_DeInit+0xf8>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f002 fab5 	bl	8007966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80053fc:	4b37      	ldr	r3, [pc, #220]	; (80054dc <USBD_CDC_DeInit+0xf8>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	3324      	adds	r3, #36	; 0x24
 8005412:	2200      	movs	r2, #0
 8005414:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005416:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <USBD_CDC_DeInit+0xfc>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f002 faa2 	bl	8007966 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005422:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <USBD_CDC_DeInit+0xfc>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f003 020f 	and.w	r2, r3, #15
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800543a:	2200      	movs	r2, #0
 800543c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <USBD_CDC_DeInit+0x100>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f002 fa8e 	bl	8007966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800544a:	4b26      	ldr	r3, [pc, #152]	; (80054e4 <USBD_CDC_DeInit+0x100>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f003 020f 	and.w	r2, r3, #15
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	3324      	adds	r3, #36	; 0x24
 8005460:	2200      	movs	r2, #0
 8005462:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <USBD_CDC_DeInit+0x100>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3326      	adds	r3, #38	; 0x26
 800547a:	2200      	movs	r2, #0
 800547c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	32b0      	adds	r2, #176	; 0xb0
 8005488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01f      	beq.n	80054d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	33b0      	adds	r3, #176	; 0xb0
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	32b0      	adds	r2, #176	; 0xb0
 80054ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f002 fb62 	bl	8007b7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	32b0      	adds	r2, #176	; 0xb0
 80054c2:	2100      	movs	r1, #0
 80054c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000093 	.word	0x20000093
 80054e0:	20000094 	.word	0x20000094
 80054e4:	20000095 	.word	0x20000095

080054e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	32b0      	adds	r2, #176	; 0xb0
 80054fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005500:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005514:	2303      	movs	r3, #3
 8005516:	e0bf      	b.n	8005698 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005520:	2b00      	cmp	r3, #0
 8005522:	d050      	beq.n	80055c6 <USBD_CDC_Setup+0xde>
 8005524:	2b20      	cmp	r3, #32
 8005526:	f040 80af 	bne.w	8005688 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	88db      	ldrh	r3, [r3, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d03a      	beq.n	80055a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b25b      	sxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	da1b      	bge.n	8005574 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	33b0      	adds	r3, #176	; 0xb0
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005552:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	88d2      	ldrh	r2, [r2, #6]
 8005558:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	88db      	ldrh	r3, [r3, #6]
 800555e:	2b07      	cmp	r3, #7
 8005560:	bf28      	it	cs
 8005562:	2307      	movcs	r3, #7
 8005564:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	89fa      	ldrh	r2, [r7, #14]
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 fd89 	bl	8007084 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005572:	e090      	b.n	8005696 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785a      	ldrb	r2, [r3, #1]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	88db      	ldrh	r3, [r3, #6]
 8005582:	2b3f      	cmp	r3, #63	; 0x3f
 8005584:	d803      	bhi.n	800558e <USBD_CDC_Setup+0xa6>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	88db      	ldrh	r3, [r3, #6]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	e000      	b.n	8005590 <USBD_CDC_Setup+0xa8>
 800558e:	2240      	movs	r2, #64	; 0x40
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005596:	6939      	ldr	r1, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800559e:	461a      	mov	r2, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 fd9b 	bl	80070dc <USBD_CtlPrepareRx>
      break;
 80055a6:	e076      	b.n	8005696 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	33b0      	adds	r3, #176	; 0xb0
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	7850      	ldrb	r0, [r2, #1]
 80055be:	2200      	movs	r2, #0
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	4798      	blx	r3
      break;
 80055c4:	e067      	b.n	8005696 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	2b0b      	cmp	r3, #11
 80055cc:	d851      	bhi.n	8005672 <USBD_CDC_Setup+0x18a>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <USBD_CDC_Setup+0xec>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005605 	.word	0x08005605
 80055d8:	08005681 	.word	0x08005681
 80055dc:	08005673 	.word	0x08005673
 80055e0:	08005673 	.word	0x08005673
 80055e4:	08005673 	.word	0x08005673
 80055e8:	08005673 	.word	0x08005673
 80055ec:	08005673 	.word	0x08005673
 80055f0:	08005673 	.word	0x08005673
 80055f4:	08005673 	.word	0x08005673
 80055f8:	08005673 	.word	0x08005673
 80055fc:	0800562f 	.word	0x0800562f
 8005600:	08005659 	.word	0x08005659
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b03      	cmp	r3, #3
 800560e:	d107      	bne.n	8005620 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005610:	f107 030a 	add.w	r3, r7, #10
 8005614:	2202      	movs	r2, #2
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 fd33 	bl	8007084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800561e:	e032      	b.n	8005686 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fcbd 	bl	8006fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005628:	2303      	movs	r3, #3
 800562a:	75fb      	strb	r3, [r7, #23]
          break;
 800562c:	e02b      	b.n	8005686 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800563a:	f107 030d 	add.w	r3, r7, #13
 800563e:	2201      	movs	r2, #1
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fd1e 	bl	8007084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005648:	e01d      	b.n	8005686 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fca8 	bl	8006fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005652:	2303      	movs	r3, #3
 8005654:	75fb      	strb	r3, [r7, #23]
          break;
 8005656:	e016      	b.n	8005686 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b03      	cmp	r3, #3
 8005662:	d00f      	beq.n	8005684 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 fc9b 	bl	8006fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 800566c:	2303      	movs	r3, #3
 800566e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005670:	e008      	b.n	8005684 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f001 fc94 	bl	8006fa2 <USBD_CtlError>
          ret = USBD_FAIL;
 800567a:	2303      	movs	r3, #3
 800567c:	75fb      	strb	r3, [r7, #23]
          break;
 800567e:	e002      	b.n	8005686 <USBD_CDC_Setup+0x19e>
          break;
 8005680:	bf00      	nop
 8005682:	e008      	b.n	8005696 <USBD_CDC_Setup+0x1ae>
          break;
 8005684:	bf00      	nop
      }
      break;
 8005686:	e006      	b.n	8005696 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fc89 	bl	8006fa2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005690:	2303      	movs	r3, #3
 8005692:	75fb      	strb	r3, [r7, #23]
      break;
 8005694:	bf00      	nop
  }

  return (uint8_t)ret;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80056b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	32b0      	adds	r2, #176	; 0xb0
 80056be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e065      	b.n	8005796 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	32b0      	adds	r2, #176	; 0xb0
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	f003 020f 	and.w	r2, r3, #15
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	3318      	adds	r3, #24
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02f      	beq.n	8005754 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	f003 020f 	and.w	r2, r3, #15
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	3318      	adds	r3, #24
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	f003 010f 	and.w	r1, r3, #15
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	460b      	mov	r3, r1
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4403      	add	r3, r0
 800571c:	3348      	adds	r3, #72	; 0x48
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	fbb2 f1f3 	udiv	r1, r2, r3
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800572a:	2b00      	cmp	r3, #0
 800572c:	d112      	bne.n	8005754 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 020f 	and.w	r2, r3, #15
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	3318      	adds	r3, #24
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005746:	78f9      	ldrb	r1, [r7, #3]
 8005748:	2300      	movs	r3, #0
 800574a:	2200      	movs	r2, #0
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f002 f9b2 	bl	8007ab6 <USBD_LL_Transmit>
 8005752:	e01f      	b.n	8005794 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	33b0      	adds	r3, #176	; 0xb0
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d010      	beq.n	8005794 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	33b0      	adds	r3, #176	; 0xb0
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	460b      	mov	r3, r1
 80057a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	32b0      	adds	r2, #176	; 0xb0
 80057b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	32b0      	adds	r2, #176	; 0xb0
 80057c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e01a      	b.n	8005806 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f002 f9b0 	bl	8007b3a <USBD_LL_GetRxDataSize>
 80057da:	4602      	mov	r2, r0
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	33b0      	adds	r3, #176	; 0xb0
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005800:	4611      	mov	r1, r2
 8005802:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	32b0      	adds	r2, #176	; 0xb0
 8005820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005824:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800582c:	2303      	movs	r3, #3
 800582e:	e025      	b.n	800587c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	33b0      	adds	r3, #176	; 0xb0
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01a      	beq.n	800587a <USBD_CDC_EP0_RxReady+0x6c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800584a:	2bff      	cmp	r3, #255	; 0xff
 800584c:	d015      	beq.n	800587a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	33b0      	adds	r3, #176	; 0xb0
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005866:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800586e:	b292      	uxth	r2, r2
 8005870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800588c:	2182      	movs	r1, #130	; 0x82
 800588e:	4818      	ldr	r0, [pc, #96]	; (80058f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005890:	f000 fd4f 	bl	8006332 <USBD_GetEpDesc>
 8005894:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005896:	2101      	movs	r1, #1
 8005898:	4815      	ldr	r0, [pc, #84]	; (80058f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800589a:	f000 fd4a 	bl	8006332 <USBD_GetEpDesc>
 800589e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058a0:	2181      	movs	r1, #129	; 0x81
 80058a2:	4813      	ldr	r0, [pc, #76]	; (80058f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058a4:	f000 fd45 	bl	8006332 <USBD_GetEpDesc>
 80058a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2210      	movs	r2, #16
 80058b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d006      	beq.n	80058ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2200      	movs	r2, #0
 80058c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058c4:	711a      	strb	r2, [r3, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d006      	beq.n	80058de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d8:	711a      	strb	r2, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2243      	movs	r2, #67	; 0x43
 80058e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058e4:	4b02      	ldr	r3, [pc, #8]	; (80058f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000050 	.word	0x20000050

080058f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058fc:	2182      	movs	r1, #130	; 0x82
 80058fe:	4818      	ldr	r0, [pc, #96]	; (8005960 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005900:	f000 fd17 	bl	8006332 <USBD_GetEpDesc>
 8005904:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005906:	2101      	movs	r1, #1
 8005908:	4815      	ldr	r0, [pc, #84]	; (8005960 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800590a:	f000 fd12 	bl	8006332 <USBD_GetEpDesc>
 800590e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005910:	2181      	movs	r1, #129	; 0x81
 8005912:	4813      	ldr	r0, [pc, #76]	; (8005960 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005914:	f000 fd0d 	bl	8006332 <USBD_GetEpDesc>
 8005918:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2210      	movs	r2, #16
 8005924:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2200      	movs	r2, #0
 8005930:	711a      	strb	r2, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f042 0202 	orr.w	r2, r2, #2
 8005938:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	711a      	strb	r2, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f042 0202 	orr.w	r2, r2, #2
 800594c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2243      	movs	r2, #67	; 0x43
 8005952:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005954:	4b02      	ldr	r3, [pc, #8]	; (8005960 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000050 	.word	0x20000050

08005964 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800596c:	2182      	movs	r1, #130	; 0x82
 800596e:	4818      	ldr	r0, [pc, #96]	; (80059d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005970:	f000 fcdf 	bl	8006332 <USBD_GetEpDesc>
 8005974:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005976:	2101      	movs	r1, #1
 8005978:	4815      	ldr	r0, [pc, #84]	; (80059d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800597a:	f000 fcda 	bl	8006332 <USBD_GetEpDesc>
 800597e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005980:	2181      	movs	r1, #129	; 0x81
 8005982:	4813      	ldr	r0, [pc, #76]	; (80059d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005984:	f000 fcd5 	bl	8006332 <USBD_GetEpDesc>
 8005988:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2210      	movs	r2, #16
 8005994:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2200      	movs	r2, #0
 80059a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a4:	711a      	strb	r2, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d006      	beq.n	80059be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b8:	711a      	strb	r2, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2243      	movs	r2, #67	; 0x43
 80059c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059c4:	4b02      	ldr	r3, [pc, #8]	; (80059d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000050 	.word	0x20000050

080059d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	220a      	movs	r2, #10
 80059e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059e2:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	2000000c 	.word	0x2000000c

080059f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e009      	b.n	8005a1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	33b0      	adds	r3, #176	; 0xb0
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	32b0      	adds	r2, #176	; 0xb0
 8005a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a42:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e008      	b.n	8005a60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	32b0      	adds	r2, #176	; 0xb0
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e004      	b.n	8005a9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	32b0      	adds	r2, #176	; 0xb0
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	32b0      	adds	r2, #176	; 0xb0
 8005ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e025      	b.n	8005b26 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11f      	bne.n	8005b24 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <USBD_CDC_TransmitPacket+0x88>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4403      	add	r3, r0
 8005b06:	3318      	adds	r3, #24
 8005b08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b0a:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <USBD_CDC_TransmitPacket+0x88>)
 8005b0c:	7819      	ldrb	r1, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 ffcb 	bl	8007ab6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000093 	.word	0x20000093

08005b34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32b0      	adds	r2, #176	; 0xb0
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	32b0      	adds	r2, #176	; 0xb0
 8005b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e018      	b.n	8005b94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	7c1b      	ldrb	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <USBD_CDC_ReceivePacket+0x68>)
 8005b6c:	7819      	ldrb	r1, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 ffbd 	bl	8007af8 <USBD_LL_PrepareReceive>
 8005b7e:	e008      	b.n	8005b92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <USBD_CDC_ReceivePacket+0x68>)
 8005b82:	7819      	ldrb	r1, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b8a:	2340      	movs	r3, #64	; 0x40
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 ffb3 	bl	8007af8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000094 	.word	0x20000094

08005ba0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e01f      	b.n	8005bf8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 fe2d 	bl	800784c <USBD_LL_Init>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e025      	b.n	8005c64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	32ae      	adds	r2, #174	; 0xae
 8005c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00f      	beq.n	8005c54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	32ae      	adds	r2, #174	; 0xae
 8005c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f107 020e 	add.w	r2, r7, #14
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4798      	blx	r3
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fe35 	bl	80078e4 <USBD_LL_Start>
 8005c7a:	4603      	mov	r3, r0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	4611      	mov	r1, r2
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 f908 	bl	8006f2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d01a      	beq.n	8005d78 <USBD_LL_SetupStage+0x72>
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d822      	bhi.n	8005d8c <USBD_LL_SetupStage+0x86>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <USBD_LL_SetupStage+0x4a>
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d00a      	beq.n	8005d64 <USBD_LL_SetupStage+0x5e>
 8005d4e:	e01d      	b.n	8005d8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fb5f 	bl	800641c <USBD_StdDevReq>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
      break;
 8005d62:	e020      	b.n	8005da6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fbc7 	bl	8006500 <USBD_StdItfReq>
 8005d72:	4603      	mov	r3, r0
 8005d74:	73fb      	strb	r3, [r7, #15]
      break;
 8005d76:	e016      	b.n	8005da6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fc29 	bl	80065d8 <USBD_StdEPReq>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8a:	e00c      	b.n	8005da6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fe02 	bl	80079a4 <USBD_LL_StallEP>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
      break;
 8005da4:	bf00      	nop
  }

  return ret;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	460b      	mov	r3, r1
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d16e      	bne.n	8005ea6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005dce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	f040 8098 	bne.w	8005f0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d913      	bls.n	8005e10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	1ad2      	subs	r2, r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	bf28      	it	cs
 8005e02:	4613      	movcs	r3, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f001 f984 	bl	8007116 <USBD_CtlContinueRx>
 8005e0e:	e07d      	b.n	8005f0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d014      	beq.n	8005e48 <USBD_LL_DataOutStage+0x98>
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d81d      	bhi.n	8005e5e <USBD_LL_DataOutStage+0xae>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <USBD_LL_DataOutStage+0x7c>
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d003      	beq.n	8005e32 <USBD_LL_DataOutStage+0x82>
 8005e2a:	e018      	b.n	8005e5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e30:	e018      	b.n	8005e64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fa5e 	bl	80062fe <USBD_CoreFindIF>
 8005e42:	4603      	mov	r3, r0
 8005e44:	75bb      	strb	r3, [r7, #22]
            break;
 8005e46:	e00d      	b.n	8005e64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fa60 	bl	8006318 <USBD_CoreFindEP>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e5c:	e002      	b.n	8005e64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75bb      	strb	r3, [r7, #22]
            break;
 8005e62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e64:	7dbb      	ldrb	r3, [r7, #22]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d119      	bne.n	8005e9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d113      	bne.n	8005e9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e76:	7dba      	ldrb	r2, [r7, #22]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	32ae      	adds	r2, #174	; 0xae
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e86:	7dba      	ldrb	r2, [r7, #22]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e8e:	7dba      	ldrb	r2, [r7, #22]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	32ae      	adds	r2, #174	; 0xae
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 f94a 	bl	8007138 <USBD_CtlSendStatus>
 8005ea4:	e032      	b.n	8005f0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ea6:	7afb      	ldrb	r3, [r7, #11]
 8005ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	4619      	mov	r1, r3
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fa31 	bl	8006318 <USBD_CoreFindEP>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eba:	7dbb      	ldrb	r3, [r7, #22]
 8005ebc:	2bff      	cmp	r3, #255	; 0xff
 8005ebe:	d025      	beq.n	8005f0c <USBD_LL_DataOutStage+0x15c>
 8005ec0:	7dbb      	ldrb	r3, [r7, #22]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d122      	bne.n	8005f0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d117      	bne.n	8005f02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ed2:	7dba      	ldrb	r2, [r7, #22]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	32ae      	adds	r2, #174	; 0xae
 8005ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ee2:	7dba      	ldrb	r2, [r7, #22]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005eea:	7dba      	ldrb	r2, [r7, #22]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	32ae      	adds	r2, #174	; 0xae
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	7afa      	ldrb	r2, [r7, #11]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	4798      	blx	r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	e000      	b.n	8005f0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d16f      	bne.n	800600a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d15a      	bne.n	8005ff0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d914      	bls.n	8005f70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f001 f8ac 	bl	80070ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f62:	2300      	movs	r3, #0
 8005f64:	2200      	movs	r2, #0
 8005f66:	2100      	movs	r1, #0
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f001 fdc5 	bl	8007af8 <USBD_LL_PrepareReceive>
 8005f6e:	e03f      	b.n	8005ff0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d11c      	bne.n	8005fb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d316      	bcc.n	8005fb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d20f      	bcs.n	8005fb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f96:	2200      	movs	r2, #0
 8005f98:	2100      	movs	r1, #0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f001 f88d 	bl	80070ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f001 fda2 	bl	8007af8 <USBD_LL_PrepareReceive>
 8005fb4:	e01c      	b.n	8005ff0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d10f      	bne.n	8005fe2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d009      	beq.n	8005fe2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fe2:	2180      	movs	r1, #128	; 0x80
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f001 fcdd 	bl	80079a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 f8b7 	bl	800715e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d03a      	beq.n	8006070 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fe42 	bl	8005c84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006008:	e032      	b.n	8006070 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800600a:	7afb      	ldrb	r3, [r7, #11]
 800600c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f97f 	bl	8006318 <USBD_CoreFindEP>
 800601a:	4603      	mov	r3, r0
 800601c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	2bff      	cmp	r3, #255	; 0xff
 8006022:	d025      	beq.n	8006070 <USBD_LL_DataInStage+0x15a>
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d122      	bne.n	8006070 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b03      	cmp	r3, #3
 8006034:	d11c      	bne.n	8006070 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006036:	7dfa      	ldrb	r2, [r7, #23]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	32ae      	adds	r2, #174	; 0xae
 800603c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d014      	beq.n	8006070 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006046:	7dfa      	ldrb	r2, [r7, #23]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800604e:	7dfa      	ldrb	r2, [r7, #23]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	32ae      	adds	r2, #174	; 0xae
 8006054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	7afa      	ldrb	r2, [r7, #11]
 800605c:	4611      	mov	r1, r2
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	4798      	blx	r3
 8006062:	4603      	mov	r3, r0
 8006064:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006066:	7dbb      	ldrb	r3, [r7, #22]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800606c:	7dbb      	ldrb	r3, [r7, #22]
 800606e:	e000      	b.n	8006072 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00e      	beq.n	80060e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6852      	ldr	r2, [r2, #4]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	4611      	mov	r1, r2
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060e0:	2340      	movs	r3, #64	; 0x40
 80060e2:	2200      	movs	r2, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fc17 	bl	800791a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2240      	movs	r2, #64	; 0x40
 80060f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060fc:	2340      	movs	r3, #64	; 0x40
 80060fe:	2200      	movs	r2, #0
 8006100:	2180      	movs	r1, #128	; 0x80
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fc09 	bl	800791a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2240      	movs	r2, #64	; 0x40
 8006112:	621a      	str	r2, [r3, #32]

  return ret;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614c:	b2da      	uxtb	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2204      	movs	r2, #4
 8006158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b04      	cmp	r3, #4
 800617c:	d106      	bne.n	800618c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006184:	b2da      	uxtb	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d110      	bne.n	80061d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	32ae      	adds	r2, #174	; 0xae
 80061f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e01c      	b.n	8006236 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b03      	cmp	r3, #3
 8006206:	d115      	bne.n	8006234 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32ae      	adds	r2, #174	; 0xae
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	32ae      	adds	r2, #174	; 0xae
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	4611      	mov	r1, r2
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	32ae      	adds	r2, #174	; 0xae
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800625c:	2303      	movs	r3, #3
 800625e:	e01c      	b.n	800629a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b03      	cmp	r3, #3
 800626a:	d115      	bne.n	8006298 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	32ae      	adds	r2, #174	; 0xae
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32ae      	adds	r2, #174	; 0xae
 800628a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	4611      	mov	r1, r2
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00e      	beq.n	80062f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6852      	ldr	r2, [r2, #4]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	4611      	mov	r1, r2
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800630a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006324:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	885b      	ldrh	r3, [r3, #2]
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	429a      	cmp	r2, r3
 8006358:	d920      	bls.n	800639c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006362:	e013      	b.n	800638c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006364:	f107 030a 	add.w	r3, r7, #10
 8006368:	4619      	mov	r1, r3
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f000 f81b 	bl	80063a6 <USBD_GetNextDesc>
 8006370:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	2b05      	cmp	r3, #5
 8006378:	d108      	bne.n	800638c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	789b      	ldrb	r3, [r3, #2]
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	429a      	cmp	r2, r3
 8006386:	d008      	beq.n	800639a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	885b      	ldrh	r3, [r3, #2]
 8006390:	b29a      	uxth	r2, r3
 8006392:	897b      	ldrh	r3, [r7, #10]
 8006394:	429a      	cmp	r2, r3
 8006396:	d8e5      	bhi.n	8006364 <USBD_GetEpDesc+0x32>
 8006398:	e000      	b.n	800639c <USBD_GetEpDesc+0x6a>
          break;
 800639a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800639c:	693b      	ldr	r3, [r7, #16]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	881a      	ldrh	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	4413      	add	r3, r2
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4413      	add	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063d2:	68fb      	ldr	r3, [r7, #12]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	3301      	adds	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063fe:	8a3b      	ldrh	r3, [r7, #16]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	b21a      	sxth	r2, r3
 8006404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800640e:	89fb      	ldrh	r3, [r7, #14]
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d005      	beq.n	8006442 <USBD_StdDevReq+0x26>
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d857      	bhi.n	80064ea <USBD_StdDevReq+0xce>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00f      	beq.n	800645e <USBD_StdDevReq+0x42>
 800643e:	2b20      	cmp	r3, #32
 8006440:	d153      	bne.n	80064ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	32ae      	adds	r2, #174	; 0xae
 800644c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e04a      	b.n	80064f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b09      	cmp	r3, #9
 8006464:	d83b      	bhi.n	80064de <USBD_StdDevReq+0xc2>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <USBD_StdDevReq+0x50>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	080064c1 	.word	0x080064c1
 8006470:	080064d5 	.word	0x080064d5
 8006474:	080064df 	.word	0x080064df
 8006478:	080064cb 	.word	0x080064cb
 800647c:	080064df 	.word	0x080064df
 8006480:	0800649f 	.word	0x0800649f
 8006484:	08006495 	.word	0x08006495
 8006488:	080064df 	.word	0x080064df
 800648c:	080064b7 	.word	0x080064b7
 8006490:	080064a9 	.word	0x080064a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa3c 	bl	8006914 <USBD_GetDescriptor>
          break;
 800649c:	e024      	b.n	80064e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fba1 	bl	8006be8 <USBD_SetAddress>
          break;
 80064a6:	e01f      	b.n	80064e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fbe0 	bl	8006c70 <USBD_SetConfig>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
          break;
 80064b4:	e018      	b.n	80064e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc83 	bl	8006dc4 <USBD_GetConfig>
          break;
 80064be:	e013      	b.n	80064e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fcb4 	bl	8006e30 <USBD_GetStatus>
          break;
 80064c8:	e00e      	b.n	80064e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fce3 	bl	8006e98 <USBD_SetFeature>
          break;
 80064d2:	e009      	b.n	80064e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fd07 	bl	8006eea <USBD_ClrFeature>
          break;
 80064dc:	e004      	b.n	80064e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fd5e 	bl	8006fa2 <USBD_CtlError>
          break;
 80064e6:	bf00      	nop
      }
      break;
 80064e8:	e004      	b.n	80064f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fd58 	bl	8006fa2 <USBD_CtlError>
      break;
 80064f2:	bf00      	nop
  }

  return ret;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop

08006500 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d005      	beq.n	8006526 <USBD_StdItfReq+0x26>
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d852      	bhi.n	80065c4 <USBD_StdItfReq+0xc4>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <USBD_StdItfReq+0x26>
 8006522:	2b20      	cmp	r3, #32
 8006524:	d14e      	bne.n	80065c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652c:	b2db      	uxtb	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	2b02      	cmp	r3, #2
 8006532:	d840      	bhi.n	80065b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	889b      	ldrh	r3, [r3, #4]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d836      	bhi.n	80065ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	889b      	ldrh	r3, [r3, #4]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fed9 	bl	80062fe <USBD_CoreFindIF>
 800654c:	4603      	mov	r3, r0
 800654e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2bff      	cmp	r3, #255	; 0xff
 8006554:	d01d      	beq.n	8006592 <USBD_StdItfReq+0x92>
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11a      	bne.n	8006592 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800655c:	7bba      	ldrb	r2, [r7, #14]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	32ae      	adds	r2, #174	; 0xae
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00f      	beq.n	800658c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800656c:	7bba      	ldrb	r2, [r7, #14]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006574:	7bba      	ldrb	r2, [r7, #14]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	32ae      	adds	r2, #174	; 0xae
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
 8006586:	4603      	mov	r3, r0
 8006588:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800658a:	e004      	b.n	8006596 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006590:	e001      	b.n	8006596 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006592:	2303      	movs	r3, #3
 8006594:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	88db      	ldrh	r3, [r3, #6]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d110      	bne.n	80065c0 <USBD_StdItfReq+0xc0>
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10d      	bne.n	80065c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fdc7 	bl	8007138 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065aa:	e009      	b.n	80065c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fcf7 	bl	8006fa2 <USBD_CtlError>
          break;
 80065b4:	e004      	b.n	80065c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fcf2 	bl	8006fa2 <USBD_CtlError>
          break;
 80065be:	e000      	b.n	80065c2 <USBD_StdItfReq+0xc2>
          break;
 80065c0:	bf00      	nop
      }
      break;
 80065c2:	e004      	b.n	80065ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fceb 	bl	8006fa2 <USBD_CtlError>
      break;
 80065cc:	bf00      	nop
  }

  return ret;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	889b      	ldrh	r3, [r3, #4]
 80065ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d007      	beq.n	8006608 <USBD_StdEPReq+0x30>
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	f200 817f 	bhi.w	80068fc <USBD_StdEPReq+0x324>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02a      	beq.n	8006658 <USBD_StdEPReq+0x80>
 8006602:	2b20      	cmp	r3, #32
 8006604:	f040 817a 	bne.w	80068fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff fe83 	bl	8006318 <USBD_CoreFindEP>
 8006612:	4603      	mov	r3, r0
 8006614:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006616:	7b7b      	ldrb	r3, [r7, #13]
 8006618:	2bff      	cmp	r3, #255	; 0xff
 800661a:	f000 8174 	beq.w	8006906 <USBD_StdEPReq+0x32e>
 800661e:	7b7b      	ldrb	r3, [r7, #13]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8170 	bne.w	8006906 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006626:	7b7a      	ldrb	r2, [r7, #13]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800662e:	7b7a      	ldrb	r2, [r7, #13]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	32ae      	adds	r2, #174	; 0xae
 8006634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8163 	beq.w	8006906 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006640:	7b7a      	ldrb	r2, [r7, #13]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32ae      	adds	r2, #174	; 0xae
 8006646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006656:	e156      	b.n	8006906 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d008      	beq.n	8006672 <USBD_StdEPReq+0x9a>
 8006660:	2b03      	cmp	r3, #3
 8006662:	f300 8145 	bgt.w	80068f0 <USBD_StdEPReq+0x318>
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 809b 	beq.w	80067a2 <USBD_StdEPReq+0x1ca>
 800666c:	2b01      	cmp	r3, #1
 800666e:	d03c      	beq.n	80066ea <USBD_StdEPReq+0x112>
 8006670:	e13e      	b.n	80068f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d002      	beq.n	8006684 <USBD_StdEPReq+0xac>
 800667e:	2b03      	cmp	r3, #3
 8006680:	d016      	beq.n	80066b0 <USBD_StdEPReq+0xd8>
 8006682:	e02c      	b.n	80066de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00d      	beq.n	80066a6 <USBD_StdEPReq+0xce>
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b80      	cmp	r3, #128	; 0x80
 800668e:	d00a      	beq.n	80066a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f985 	bl	80079a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800669a:	2180      	movs	r1, #128	; 0x80
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f981 	bl	80079a4 <USBD_LL_StallEP>
 80066a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066a4:	e020      	b.n	80066e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fc7a 	bl	8006fa2 <USBD_CtlError>
              break;
 80066ae:	e01b      	b.n	80066e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	885b      	ldrh	r3, [r3, #2]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10e      	bne.n	80066d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <USBD_StdEPReq+0xfe>
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	2b80      	cmp	r3, #128	; 0x80
 80066c2:	d008      	beq.n	80066d6 <USBD_StdEPReq+0xfe>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	88db      	ldrh	r3, [r3, #6]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 f967 	bl	80079a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fd2e 	bl	8007138 <USBD_CtlSendStatus>

              break;
 80066dc:	e004      	b.n	80066e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fc5e 	bl	8006fa2 <USBD_CtlError>
              break;
 80066e6:	bf00      	nop
          }
          break;
 80066e8:	e107      	b.n	80068fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d002      	beq.n	80066fc <USBD_StdEPReq+0x124>
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d016      	beq.n	8006728 <USBD_StdEPReq+0x150>
 80066fa:	e04b      	b.n	8006794 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <USBD_StdEPReq+0x146>
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	2b80      	cmp	r3, #128	; 0x80
 8006706:	d00a      	beq.n	800671e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f949 	bl	80079a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006712:	2180      	movs	r1, #128	; 0x80
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f945 	bl	80079a4 <USBD_LL_StallEP>
 800671a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800671c:	e040      	b.n	80067a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fc3e 	bl	8006fa2 <USBD_CtlError>
              break;
 8006726:	e03b      	b.n	80067a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	885b      	ldrh	r3, [r3, #2]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d136      	bne.n	800679e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 f94f 	bl	80079e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fcf7 	bl	8007138 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fde2 	bl	8006318 <USBD_CoreFindEP>
 8006754:	4603      	mov	r3, r0
 8006756:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006758:	7b7b      	ldrb	r3, [r7, #13]
 800675a:	2bff      	cmp	r3, #255	; 0xff
 800675c:	d01f      	beq.n	800679e <USBD_StdEPReq+0x1c6>
 800675e:	7b7b      	ldrb	r3, [r7, #13]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d11c      	bne.n	800679e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006764:	7b7a      	ldrb	r2, [r7, #13]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800676c:	7b7a      	ldrb	r2, [r7, #13]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	32ae      	adds	r2, #174	; 0xae
 8006772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d010      	beq.n	800679e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800677c:	7b7a      	ldrb	r2, [r7, #13]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	32ae      	adds	r2, #174	; 0xae
 8006782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
 800678e:	4603      	mov	r3, r0
 8006790:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006792:	e004      	b.n	800679e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fc03 	bl	8006fa2 <USBD_CtlError>
              break;
 800679c:	e000      	b.n	80067a0 <USBD_StdEPReq+0x1c8>
              break;
 800679e:	bf00      	nop
          }
          break;
 80067a0:	e0ab      	b.n	80068fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d002      	beq.n	80067b4 <USBD_StdEPReq+0x1dc>
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d032      	beq.n	8006818 <USBD_StdEPReq+0x240>
 80067b2:	e097      	b.n	80068e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <USBD_StdEPReq+0x1f2>
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d004      	beq.n	80067ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fbed 	bl	8006fa2 <USBD_CtlError>
                break;
 80067c8:	e091      	b.n	80068ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da0b      	bge.n	80067ea <USBD_StdEPReq+0x212>
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	3310      	adds	r3, #16
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4413      	add	r3, r2
 80067e6:	3304      	adds	r3, #4
 80067e8:	e00b      	b.n	8006802 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	4413      	add	r3, r2
 8006800:	3304      	adds	r3, #4
 8006802:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2202      	movs	r2, #2
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fc37 	bl	8007084 <USBD_CtlSendData>
              break;
 8006816:	e06a      	b.n	80068ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800681c:	2b00      	cmp	r3, #0
 800681e:	da11      	bge.n	8006844 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d117      	bne.n	800686a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fbb0 	bl	8006fa2 <USBD_CtlError>
                  break;
 8006842:	e054      	b.n	80068ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fb9d 	bl	8006fa2 <USBD_CtlError>
                  break;
 8006868:	e041      	b.n	80068ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800686a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800686e:	2b00      	cmp	r3, #0
 8006870:	da0b      	bge.n	800688a <USBD_StdEPReq+0x2b2>
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	3310      	adds	r3, #16
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	3304      	adds	r3, #4
 8006888:	e00b      	b.n	80068a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	4413      	add	r3, r2
 80068a0:	3304      	adds	r3, #4
 80068a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <USBD_StdEPReq+0x2d8>
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b80      	cmp	r3, #128	; 0x80
 80068ae:	d103      	bne.n	80068b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e00e      	b.n	80068d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f8af 	bl	8007a20 <USBD_LL_IsStallEP>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e002      	b.n	80068d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2202      	movs	r2, #2
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fbd1 	bl	8007084 <USBD_CtlSendData>
              break;
 80068e2:	e004      	b.n	80068ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fb5b 	bl	8006fa2 <USBD_CtlError>
              break;
 80068ec:	bf00      	nop
          }
          break;
 80068ee:	e004      	b.n	80068fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fb55 	bl	8006fa2 <USBD_CtlError>
          break;
 80068f8:	bf00      	nop
      }
      break;
 80068fa:	e005      	b.n	8006908 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb4f 	bl	8006fa2 <USBD_CtlError>
      break;
 8006904:	e000      	b.n	8006908 <USBD_StdEPReq+0x330>
      break;
 8006906:	bf00      	nop
  }

  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	885b      	ldrh	r3, [r3, #2]
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	2b06      	cmp	r3, #6
 8006936:	f200 8128 	bhi.w	8006b8a <USBD_GetDescriptor+0x276>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <USBD_GetDescriptor+0x2c>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	0800695d 	.word	0x0800695d
 8006944:	08006975 	.word	0x08006975
 8006948:	080069b5 	.word	0x080069b5
 800694c:	08006b8b 	.word	0x08006b8b
 8006950:	08006b8b 	.word	0x08006b8b
 8006954:	08006b2b 	.word	0x08006b2b
 8006958:	08006b57 	.word	0x08006b57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7c12      	ldrb	r2, [r2, #16]
 8006968:	f107 0108 	add.w	r1, r7, #8
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	60f8      	str	r0, [r7, #12]
      break;
 8006972:	e112      	b.n	8006b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7c1b      	ldrb	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10d      	bne.n	8006998 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f107 0208 	add.w	r2, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	2202      	movs	r2, #2
 8006994:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006996:	e100      	b.n	8006b9a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	f107 0208 	add.w	r2, r7, #8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	2202      	movs	r2, #2
 80069b0:	701a      	strb	r2, [r3, #0]
      break;
 80069b2:	e0f2      	b.n	8006b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	885b      	ldrh	r3, [r3, #2]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	f200 80ac 	bhi.w	8006b18 <USBD_GetDescriptor+0x204>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <USBD_GetDescriptor+0xb4>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	08006a15 	.word	0x08006a15
 80069d0:	08006a49 	.word	0x08006a49
 80069d4:	08006a7d 	.word	0x08006a7d
 80069d8:	08006ab1 	.word	0x08006ab1
 80069dc:	08006ae5 	.word	0x08006ae5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	7c12      	ldrb	r2, [r2, #16]
 80069f8:	f107 0108 	add.w	r1, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a02:	e091      	b.n	8006b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 facb 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	72fb      	strb	r3, [r7, #11]
          break;
 8006a12:	e089      	b.n	8006b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	7c12      	ldrb	r2, [r2, #16]
 8006a2c:	f107 0108 	add.w	r1, r7, #8
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a36:	e077      	b.n	8006b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fab1 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	3301      	adds	r3, #1
 8006a44:	72fb      	strb	r3, [r7, #11]
          break;
 8006a46:	e06f      	b.n	8006b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7c12      	ldrb	r2, [r2, #16]
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a6a:	e05d      	b.n	8006b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa97 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	3301      	adds	r3, #1
 8006a78:	72fb      	strb	r3, [r7, #11]
          break;
 8006a7a:	e055      	b.n	8006b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	7c12      	ldrb	r2, [r2, #16]
 8006a94:	f107 0108 	add.w	r1, r7, #8
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
 8006a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a9e:	e043      	b.n	8006b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa7d 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	72fb      	strb	r3, [r7, #11]
          break;
 8006aae:	e03b      	b.n	8006b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	7c12      	ldrb	r2, [r2, #16]
 8006ac8:	f107 0108 	add.w	r1, r7, #8
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
 8006ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ad2:	e029      	b.n	8006b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa63 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ae2:	e021      	b.n	8006b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	7c12      	ldrb	r2, [r2, #16]
 8006afc:	f107 0108 	add.w	r1, r7, #8
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
 8006b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b06:	e00f      	b.n	8006b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa49 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	3301      	adds	r3, #1
 8006b14:	72fb      	strb	r3, [r7, #11]
          break;
 8006b16:	e007      	b.n	8006b28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa41 	bl	8006fa2 <USBD_CtlError>
          err++;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	3301      	adds	r3, #1
 8006b24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b26:	bf00      	nop
      }
      break;
 8006b28:	e037      	b.n	8006b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7c1b      	ldrb	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3a:	f107 0208 	add.w	r2, r7, #8
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4798      	blx	r3
 8006b42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b44:	e029      	b.n	8006b9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa2a 	bl	8006fa2 <USBD_CtlError>
        err++;
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	3301      	adds	r3, #1
 8006b52:	72fb      	strb	r3, [r7, #11]
      break;
 8006b54:	e021      	b.n	8006b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7c1b      	ldrb	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10d      	bne.n	8006b7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	f107 0208 	add.w	r2, r7, #8
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	4798      	blx	r3
 8006b6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	2207      	movs	r2, #7
 8006b76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b78:	e00f      	b.n	8006b9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fa10 	bl	8006fa2 <USBD_CtlError>
        err++;
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	3301      	adds	r3, #1
 8006b86:	72fb      	strb	r3, [r7, #11]
      break;
 8006b88:	e007      	b.n	8006b9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa08 	bl	8006fa2 <USBD_CtlError>
      err++;
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	3301      	adds	r3, #1
 8006b96:	72fb      	strb	r3, [r7, #11]
      break;
 8006b98:	bf00      	nop
  }

  if (err != 0U)
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11e      	bne.n	8006bde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	88db      	ldrh	r3, [r3, #6]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d016      	beq.n	8006bd6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ba8:	893b      	ldrh	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00e      	beq.n	8006bcc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	88da      	ldrh	r2, [r3, #6]
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	bf28      	it	cs
 8006bb8:	4613      	movcs	r3, r2
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bbe:	893b      	ldrh	r3, [r7, #8]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fa5d 	bl	8007084 <USBD_CtlSendData>
 8006bca:	e009      	b.n	8006be0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f9e7 	bl	8006fa2 <USBD_CtlError>
 8006bd4:	e004      	b.n	8006be0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 faae 	bl	8007138 <USBD_CtlSendStatus>
 8006bdc:	e000      	b.n	8006be0 <USBD_GetDescriptor+0x2cc>
    return;
 8006bde:	bf00      	nop
  }
}
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop

08006be8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	889b      	ldrh	r3, [r3, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d131      	bne.n	8006c5e <USBD_SetAddress+0x76>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	88db      	ldrh	r3, [r3, #6]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d12d      	bne.n	8006c5e <USBD_SetAddress+0x76>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	2b7f      	cmp	r3, #127	; 0x7f
 8006c08:	d829      	bhi.n	8006c5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d104      	bne.n	8006c2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f9bc 	bl	8006fa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2a:	e01d      	b.n	8006c68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	7bfa      	ldrb	r2, [r7, #15]
 8006c30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ff1d 	bl	8007a78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa7a 	bl	8007138 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c52:	e009      	b.n	8006c68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5c:	e004      	b.n	8006c68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f99e 	bl	8006fa2 <USBD_CtlError>
  }
}
 8006c66:	bf00      	nop
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	885b      	ldrh	r3, [r3, #2]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	4b4e      	ldr	r3, [pc, #312]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006c86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c88:	4b4d      	ldr	r3, [pc, #308]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d905      	bls.n	8006c9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f985 	bl	8006fa2 <USBD_CtlError>
    return USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e08c      	b.n	8006db6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d002      	beq.n	8006cae <USBD_SetConfig+0x3e>
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d029      	beq.n	8006d00 <USBD_SetConfig+0x90>
 8006cac:	e075      	b.n	8006d9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006cae:	4b44      	ldr	r3, [pc, #272]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d020      	beq.n	8006cf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006cb6:	4b42      	ldr	r3, [pc, #264]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cc0:	4b3f      	ldr	r3, [pc, #252]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fe ffe7 	bl	8005c9a <USBD_SetClassConfig>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f962 	bl	8006fa2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ce6:	e065      	b.n	8006db4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fa25 	bl	8007138 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cf6:	e05d      	b.n	8006db4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fa1d 	bl	8007138 <USBD_CtlSendStatus>
      break;
 8006cfe:	e059      	b.n	8006db4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d00:	4b2f      	ldr	r3, [pc, #188]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d112      	bne.n	8006d2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d10:	4b2b      	ldr	r3, [pc, #172]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fe ffd6 	bl	8005cd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa06 	bl	8007138 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d2c:	e042      	b.n	8006db4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d2e:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d02a      	beq.n	8006d92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fe ffc4 	bl	8005cd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d4a:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d54:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fe ff9d 	bl	8005c9a <USBD_SetClassConfig>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00f      	beq.n	8006d8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f918 	bl	8006fa2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fe ffa9 	bl	8005cd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d88:	e014      	b.n	8006db4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f9d4 	bl	8007138 <USBD_CtlSendStatus>
      break;
 8006d90:	e010      	b.n	8006db4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f9d0 	bl	8007138 <USBD_CtlSendStatus>
      break;
 8006d98:	e00c      	b.n	8006db4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f900 	bl	8006fa2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <USBD_SetConfig+0x150>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fe ff92 	bl	8005cd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006dae:	2303      	movs	r3, #3
 8006db0:	73fb      	strb	r3, [r7, #15]
      break;
 8006db2:	bf00      	nop
  }

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000025c 	.word	0x2000025c

08006dc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d004      	beq.n	8006de0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f8e2 	bl	8006fa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dde:	e023      	b.n	8006e28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	dc02      	bgt.n	8006df2 <USBD_GetConfig+0x2e>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dc03      	bgt.n	8006df8 <USBD_GetConfig+0x34>
 8006df0:	e015      	b.n	8006e1e <USBD_GetConfig+0x5a>
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d00b      	beq.n	8006e0e <USBD_GetConfig+0x4a>
 8006df6:	e012      	b.n	8006e1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3308      	adds	r3, #8
 8006e02:	2201      	movs	r2, #1
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f93c 	bl	8007084 <USBD_CtlSendData>
        break;
 8006e0c:	e00c      	b.n	8006e28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	2201      	movs	r2, #1
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f934 	bl	8007084 <USBD_CtlSendData>
        break;
 8006e1c:	e004      	b.n	8006e28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8be 	bl	8006fa2 <USBD_CtlError>
        break;
 8006e26:	bf00      	nop
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d81e      	bhi.n	8006e86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	88db      	ldrh	r3, [r3, #6]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d004      	beq.n	8006e5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8a5 	bl	8006fa2 <USBD_CtlError>
        break;
 8006e58:	e01a      	b.n	8006e90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f043 0202 	orr.w	r2, r3, #2
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f900 	bl	8007084 <USBD_CtlSendData>
      break;
 8006e84:	e004      	b.n	8006e90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f88a 	bl	8006fa2 <USBD_CtlError>
      break;
 8006e8e:	bf00      	nop
  }
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	885b      	ldrh	r3, [r3, #2]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d107      	bne.n	8006eba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f940 	bl	8007138 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006eb8:	e013      	b.n	8006ee2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	885b      	ldrh	r3, [r3, #2]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d10b      	bne.n	8006eda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	889b      	ldrh	r3, [r3, #4]
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f930 	bl	8007138 <USBD_CtlSendStatus>
}
 8006ed8:	e003      	b.n	8006ee2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f860 	bl	8006fa2 <USBD_CtlError>
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d80b      	bhi.n	8006f1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d10c      	bne.n	8006f24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f910 	bl	8007138 <USBD_CtlSendStatus>
      }
      break;
 8006f18:	e004      	b.n	8006f24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f840 	bl	8006fa2 <USBD_CtlError>
      break;
 8006f22:	e000      	b.n	8006f26 <USBD_ClrFeature+0x3c>
      break;
 8006f24:	bf00      	nop
  }
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff fa41 	bl	80063e0 <SWAPBYTE>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	461a      	mov	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff fa34 	bl	80063e0 <SWAPBYTE>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3301      	adds	r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fa27 	bl	80063e0 <SWAPBYTE>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	80da      	strh	r2, [r3, #6]
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fac:	2180      	movs	r1, #128	; 0x80
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fcf8 	bl	80079a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fcf4 	bl	80079a4 <USBD_LL_StallEP>
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d036      	beq.n	8007048 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006fde:	6938      	ldr	r0, [r7, #16]
 8006fe0:	f000 f836 	bl	8007050 <USBD_GetLen>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	3301      	adds	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	2203      	movs	r2, #3
 800700c:	701a      	strb	r2, [r3, #0]
  idx++;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	3301      	adds	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007014:	e013      	b.n	800703e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	4413      	add	r3, r2
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	7812      	ldrb	r2, [r2, #0]
 8007020:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	3301      	adds	r3, #1
 8007026:	613b      	str	r3, [r7, #16]
    idx++;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	3301      	adds	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	4413      	add	r3, r2
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]
    idx++;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	3301      	adds	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e7      	bne.n	8007016 <USBD_GetString+0x52>
 8007046:	e000      	b.n	800704a <USBD_GetString+0x86>
    return;
 8007048:	bf00      	nop
  }
}
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007060:	e005      	b.n	800706e <USBD_GetLen+0x1e>
  {
    len++;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	3301      	adds	r3, #1
 8007066:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	3301      	adds	r3, #1
 800706c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f5      	bne.n	8007062 <USBD_GetLen+0x12>
  }

  return len;
 8007076:	7bfb      	ldrb	r3, [r7, #15]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2202      	movs	r2, #2
 8007094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	2100      	movs	r1, #0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fd03 	bl	8007ab6 <USBD_LL_Transmit>

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	2100      	movs	r1, #0
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fcf2 	bl	8007ab6 <USBD_LL_Transmit>

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2203      	movs	r2, #3
 80070ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	2100      	movs	r1, #0
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fcf6 	bl	8007af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	2100      	movs	r1, #0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fce5 	bl	8007af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2204      	movs	r2, #4
 8007144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007148:	2300      	movs	r3, #0
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fcb1 	bl	8007ab6 <USBD_LL_Transmit>

  return USBD_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2205      	movs	r2, #5
 800716a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	2100      	movs	r1, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fcbf 	bl	8007af8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007188:	2200      	movs	r2, #0
 800718a:	4912      	ldr	r1, [pc, #72]	; (80071d4 <MX_USB_DEVICE_Init+0x50>)
 800718c:	4812      	ldr	r0, [pc, #72]	; (80071d8 <MX_USB_DEVICE_Init+0x54>)
 800718e:	f7fe fd07 	bl	8005ba0 <USBD_Init>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007198:	f7f9 faee 	bl	8000778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800719c:	490f      	ldr	r1, [pc, #60]	; (80071dc <MX_USB_DEVICE_Init+0x58>)
 800719e:	480e      	ldr	r0, [pc, #56]	; (80071d8 <MX_USB_DEVICE_Init+0x54>)
 80071a0:	f7fe fd2e 	bl	8005c00 <USBD_RegisterClass>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071aa:	f7f9 fae5 	bl	8000778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071ae:	490c      	ldr	r1, [pc, #48]	; (80071e0 <MX_USB_DEVICE_Init+0x5c>)
 80071b0:	4809      	ldr	r0, [pc, #36]	; (80071d8 <MX_USB_DEVICE_Init+0x54>)
 80071b2:	f7fe fc1f 	bl	80059f4 <USBD_CDC_RegisterInterface>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071bc:	f7f9 fadc 	bl	8000778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071c0:	4805      	ldr	r0, [pc, #20]	; (80071d8 <MX_USB_DEVICE_Init+0x54>)
 80071c2:	f7fe fd53 	bl	8005c6c <USBD_Start>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071cc:	f7f9 fad4 	bl	8000778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071d0:	bf00      	nop
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	200000ac 	.word	0x200000ac
 80071d8:	20000260 	.word	0x20000260
 80071dc:	20000018 	.word	0x20000018
 80071e0:	20000098 	.word	0x20000098

080071e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071e8:	2200      	movs	r2, #0
 80071ea:	4905      	ldr	r1, [pc, #20]	; (8007200 <CDC_Init_FS+0x1c>)
 80071ec:	4805      	ldr	r0, [pc, #20]	; (8007204 <CDC_Init_FS+0x20>)
 80071ee:	f7fe fc1b 	bl	8005a28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071f2:	4905      	ldr	r1, [pc, #20]	; (8007208 <CDC_Init_FS+0x24>)
 80071f4:	4803      	ldr	r0, [pc, #12]	; (8007204 <CDC_Init_FS+0x20>)
 80071f6:	f7fe fc39 	bl	8005a6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000d3c 	.word	0x20000d3c
 8007204:	20000260 	.word	0x20000260
 8007208:	2000053c 	.word	0x2000053c

0800720c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007210:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007212:	4618      	mov	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	4613      	mov	r3, r2
 800722a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b23      	cmp	r3, #35	; 0x23
 8007230:	d84a      	bhi.n	80072c8 <CDC_Control_FS+0xac>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <CDC_Control_FS+0x1c>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	080072c9 	.word	0x080072c9
 800723c:	080072c9 	.word	0x080072c9
 8007240:	080072c9 	.word	0x080072c9
 8007244:	080072c9 	.word	0x080072c9
 8007248:	080072c9 	.word	0x080072c9
 800724c:	080072c9 	.word	0x080072c9
 8007250:	080072c9 	.word	0x080072c9
 8007254:	080072c9 	.word	0x080072c9
 8007258:	080072c9 	.word	0x080072c9
 800725c:	080072c9 	.word	0x080072c9
 8007260:	080072c9 	.word	0x080072c9
 8007264:	080072c9 	.word	0x080072c9
 8007268:	080072c9 	.word	0x080072c9
 800726c:	080072c9 	.word	0x080072c9
 8007270:	080072c9 	.word	0x080072c9
 8007274:	080072c9 	.word	0x080072c9
 8007278:	080072c9 	.word	0x080072c9
 800727c:	080072c9 	.word	0x080072c9
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072c9 	.word	0x080072c9
 8007288:	080072c9 	.word	0x080072c9
 800728c:	080072c9 	.word	0x080072c9
 8007290:	080072c9 	.word	0x080072c9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072c9 	.word	0x080072c9
 800729c:	080072c9 	.word	0x080072c9
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072c9 	.word	0x080072c9
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	080072c9 	.word	0x080072c9
 80072c0:	080072c9 	.word	0x080072c9
 80072c4:	080072c9 	.word	0x080072c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80072c8:	bf00      	nop
  }

  return (USBD_OK);
 80072ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	4810      	ldr	r0, [pc, #64]	; (8007328 <CDC_Receive_FS+0x50>)
 80072e6:	f7fe fbc1 	bl	8005a6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80072ea:	480f      	ldr	r0, [pc, #60]	; (8007328 <CDC_Receive_FS+0x50>)
 80072ec:	f7fe fc22 	bl	8005b34 <USBD_CDC_ReceivePacket>
  uint8_t len=(uint8_t)*Len;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	73fb      	strb	r3, [r7, #15]
  memset(buffer,'\0',64);
 80072f6:	2240      	movs	r2, #64	; 0x40
 80072f8:	2100      	movs	r1, #0
 80072fa:	480c      	ldr	r0, [pc, #48]	; (800732c <CDC_Receive_FS+0x54>)
 80072fc:	f000 fc94 	bl	8007c28 <memset>
  memcpy(buffer,Buf,len);
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	461a      	mov	r2, r3
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4809      	ldr	r0, [pc, #36]	; (800732c <CDC_Receive_FS+0x54>)
 8007308:	f000 fcc2 	bl	8007c90 <memcpy>
  memset(Buf,'\0',len);
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	461a      	mov	r2, r3
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc88 	bl	8007c28 <memset>
  parseData(buffer);
 8007318:	4804      	ldr	r0, [pc, #16]	; (800732c <CDC_Receive_FS+0x54>)
 800731a:	f7f9 fc63 	bl	8000be4 <parseData>
  return (USBD_OK);
 800731e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000260 	.word	0x20000260
 800732c:	200001fc 	.word	0x200001fc

08007330 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <CDC_Transmit_FS+0x48>)
 8007342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007346:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007352:	2301      	movs	r3, #1
 8007354:	e00b      	b.n	800736e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007356:	887b      	ldrh	r3, [r7, #2]
 8007358:	461a      	mov	r2, r3
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4806      	ldr	r0, [pc, #24]	; (8007378 <CDC_Transmit_FS+0x48>)
 800735e:	f7fe fb63 	bl	8005a28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007362:	4805      	ldr	r0, [pc, #20]	; (8007378 <CDC_Transmit_FS+0x48>)
 8007364:	f7fe fba0 	bl	8005aa8 <USBD_CDC_TransmitPacket>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000260 	.word	0x20000260

0800737c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800738e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007392:	4618      	mov	r0, r3
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2212      	movs	r2, #18
 80073b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073b2:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	200000c8 	.word	0x200000c8

080073c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2204      	movs	r2, #4
 80073d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073d6:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	200000dc 	.word	0x200000dc

080073e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4907      	ldr	r1, [pc, #28]	; (800741c <USBD_FS_ProductStrDescriptor+0x34>)
 80073fe:	4808      	ldr	r0, [pc, #32]	; (8007420 <USBD_FS_ProductStrDescriptor+0x38>)
 8007400:	f7ff fde0 	bl	8006fc4 <USBD_GetString>
 8007404:	e004      	b.n	8007410 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	4904      	ldr	r1, [pc, #16]	; (800741c <USBD_FS_ProductStrDescriptor+0x34>)
 800740a:	4805      	ldr	r0, [pc, #20]	; (8007420 <USBD_FS_ProductStrDescriptor+0x38>)
 800740c:	f7ff fdda 	bl	8006fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	2000153c 	.word	0x2000153c
 8007420:	0800864c 	.word	0x0800864c

08007424 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	4904      	ldr	r1, [pc, #16]	; (8007444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007434:	4804      	ldr	r0, [pc, #16]	; (8007448 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007436:	f7ff fdc5 	bl	8006fc4 <USBD_GetString>
  return USBD_StrDesc;
 800743a:	4b02      	ldr	r3, [pc, #8]	; (8007444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	2000153c 	.word	0x2000153c
 8007448:	08008664 	.word	0x08008664

0800744c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	221a      	movs	r2, #26
 800745c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800745e:	f000 f843 	bl	80074e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007462:	4b02      	ldr	r3, [pc, #8]	; (800746c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200000e0 	.word	0x200000e0

08007470 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4907      	ldr	r1, [pc, #28]	; (80074a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007486:	4808      	ldr	r0, [pc, #32]	; (80074a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007488:	f7ff fd9c 	bl	8006fc4 <USBD_GetString>
 800748c:	e004      	b.n	8007498 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4904      	ldr	r1, [pc, #16]	; (80074a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007492:	4805      	ldr	r0, [pc, #20]	; (80074a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007494:	f7ff fd96 	bl	8006fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007498:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	2000153c 	.word	0x2000153c
 80074a8:	08008678 	.word	0x08008678

080074ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d105      	bne.n	80074ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	4907      	ldr	r1, [pc, #28]	; (80074e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074c2:	4808      	ldr	r0, [pc, #32]	; (80074e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074c4:	f7ff fd7e 	bl	8006fc4 <USBD_GetString>
 80074c8:	e004      	b.n	80074d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	4904      	ldr	r1, [pc, #16]	; (80074e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074ce:	4805      	ldr	r0, [pc, #20]	; (80074e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074d0:	f7ff fd78 	bl	8006fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074d4:	4b02      	ldr	r3, [pc, #8]	; (80074e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	2000153c 	.word	0x2000153c
 80074e4:	08008684 	.word	0x08008684

080074e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074ee:	4b0f      	ldr	r3, [pc, #60]	; (800752c <Get_SerialNum+0x44>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074f4:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <Get_SerialNum+0x48>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074fa:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <Get_SerialNum+0x4c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4413      	add	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800750e:	2208      	movs	r2, #8
 8007510:	4909      	ldr	r1, [pc, #36]	; (8007538 <Get_SerialNum+0x50>)
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f814 	bl	8007540 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007518:	2204      	movs	r2, #4
 800751a:	4908      	ldr	r1, [pc, #32]	; (800753c <Get_SerialNum+0x54>)
 800751c:	68b8      	ldr	r0, [r7, #8]
 800751e:	f000 f80f 	bl	8007540 <IntToUnicode>
  }
}
 8007522:	bf00      	nop
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	1fff7a10 	.word	0x1fff7a10
 8007530:	1fff7a14 	.word	0x1fff7a14
 8007534:	1fff7a18 	.word	0x1fff7a18
 8007538:	200000e2 	.word	0x200000e2
 800753c:	200000f2 	.word	0x200000f2

08007540 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	4613      	mov	r3, r2
 800754c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
 8007556:	e027      	b.n	80075a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	0f1b      	lsrs	r3, r3, #28
 800755c:	2b09      	cmp	r3, #9
 800755e:	d80b      	bhi.n	8007578 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	0f1b      	lsrs	r3, r3, #28
 8007564:	b2da      	uxtb	r2, r3
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4619      	mov	r1, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	440b      	add	r3, r1
 8007570:	3230      	adds	r2, #48	; 0x30
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e00a      	b.n	800758e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0f1b      	lsrs	r3, r3, #28
 800757c:	b2da      	uxtb	r2, r3
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4619      	mov	r1, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	440b      	add	r3, r1
 8007588:	3237      	adds	r2, #55	; 0x37
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	3301      	adds	r3, #1
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4413      	add	r3, r2
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	3301      	adds	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]
 80075a8:	7dfa      	ldrb	r2, [r7, #23]
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d3d3      	bcc.n	8007558 <IntToUnicode+0x18>
  }
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	; 0x28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075c8:	f107 0314 	add.w	r3, r7, #20
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	609a      	str	r2, [r3, #8]
 80075d4:	60da      	str	r2, [r3, #12]
 80075d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075e0:	d13a      	bne.n	8007658 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	4b1e      	ldr	r3, [pc, #120]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 80075ec:	f043 0301 	orr.w	r3, r3, #1
 80075f0:	6313      	str	r3, [r2, #48]	; 0x30
 80075f2:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	613b      	str	r3, [r7, #16]
 80075fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007604:	2302      	movs	r3, #2
 8007606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007608:	2300      	movs	r3, #0
 800760a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800760c:	2303      	movs	r3, #3
 800760e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007610:	230a      	movs	r3, #10
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007614:	f107 0314 	add.w	r3, r7, #20
 8007618:	4619      	mov	r1, r3
 800761a:	4812      	ldr	r0, [pc, #72]	; (8007664 <HAL_PCD_MspInit+0xa4>)
 800761c:	f7f9 fddc 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007620:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 8007622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007624:	4a0e      	ldr	r2, [pc, #56]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 8007626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762a:	6353      	str	r3, [r2, #52]	; 0x34
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 8007636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800763a:	6453      	str	r3, [r2, #68]	; 0x44
 800763c:	4b08      	ldr	r3, [pc, #32]	; (8007660 <HAL_PCD_MspInit+0xa0>)
 800763e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007648:	2200      	movs	r2, #0
 800764a:	2100      	movs	r1, #0
 800764c:	2043      	movs	r0, #67	; 0x43
 800764e:	f7f9 fd8c 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007652:	2043      	movs	r0, #67	; 0x43
 8007654:	f7f9 fda5 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007658:	bf00      	nop
 800765a:	3728      	adds	r7, #40	; 0x28
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40023800 	.word	0x40023800
 8007664:	40020000 	.word	0x40020000

08007668 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe fb41 	bl	8005d06 <USBD_LL_SetupStage>
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	4613      	mov	r3, r2
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	440b      	add	r3, r1
 80076ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	4619      	mov	r1, r3
 80076b6:	f7fe fb7b 	bl	8005db0 <USBD_LL_DataOutStage>
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80076d4:	78fa      	ldrb	r2, [r7, #3]
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	4613      	mov	r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	334c      	adds	r3, #76	; 0x4c
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	4619      	mov	r1, r3
 80076ea:	f7fe fc14 	bl	8005f16 <USBD_LL_DataInStage>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fd48 	bl	800619a <USBD_LL_SOF>
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800771a:	2301      	movs	r3, #1
 800771c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d102      	bne.n	800772c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
 800772a:	e008      	b.n	800773e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d102      	bne.n	800773a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007734:	2301      	movs	r3, #1
 8007736:	73fb      	strb	r3, [r7, #15]
 8007738:	e001      	b.n	800773e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800773a:	f7f9 f81d 	bl	8000778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007744:	7bfa      	ldrb	r2, [r7, #15]
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fce8 	bl	800611e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fc90 	bl	800607a <USBD_LL_Reset>
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fce3 	bl	800613e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6812      	ldr	r2, [r2, #0]
 8007786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <HAL_PCD_SuspendCallback+0x48>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	4a03      	ldr	r2, [pc, #12]	; (80077ac <HAL_PCD_SuspendCallback+0x48>)
 800779e:	f043 0306 	orr.w	r3, r3, #6
 80077a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	e000ed00 	.word	0xe000ed00

080077b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fcd3 	bl	800616a <USBD_LL_Resume>
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fd2b 	bl	800623e <USBD_LL_IsoOUTIncomplete>
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fce7 	bl	80061da <USBD_LL_IsoINIncomplete>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fd3d 	bl	80062a2 <USBD_LL_DevConnected>
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fd3a 	bl	80062b8 <USBD_LL_DevDisconnected>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d13c      	bne.n	80078d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800785c:	4a20      	ldr	r2, [pc, #128]	; (80078e0 <USBD_LL_Init+0x94>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a1e      	ldr	r2, [pc, #120]	; (80078e0 <USBD_LL_Init+0x94>)
 8007868:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800786c:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <USBD_LL_Init+0x94>)
 800786e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007874:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <USBD_LL_Init+0x94>)
 8007876:	2204      	movs	r2, #4
 8007878:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800787a:	4b19      	ldr	r3, [pc, #100]	; (80078e0 <USBD_LL_Init+0x94>)
 800787c:	2202      	movs	r2, #2
 800787e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007880:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <USBD_LL_Init+0x94>)
 8007882:	2200      	movs	r2, #0
 8007884:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007886:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <USBD_LL_Init+0x94>)
 8007888:	2202      	movs	r2, #2
 800788a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800788c:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <USBD_LL_Init+0x94>)
 800788e:	2200      	movs	r2, #0
 8007890:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007892:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <USBD_LL_Init+0x94>)
 8007894:	2200      	movs	r2, #0
 8007896:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007898:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <USBD_LL_Init+0x94>)
 800789a:	2200      	movs	r2, #0
 800789c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <USBD_LL_Init+0x94>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <USBD_LL_Init+0x94>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078aa:	480d      	ldr	r0, [pc, #52]	; (80078e0 <USBD_LL_Init+0x94>)
 80078ac:	f7f9 fe30 	bl	8001510 <HAL_PCD_Init>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078b6:	f7f8 ff5f 	bl	8000778 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	4808      	ldr	r0, [pc, #32]	; (80078e0 <USBD_LL_Init+0x94>)
 80078be:	f7fb f888 	bl	80029d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078c2:	2240      	movs	r2, #64	; 0x40
 80078c4:	2100      	movs	r1, #0
 80078c6:	4806      	ldr	r0, [pc, #24]	; (80078e0 <USBD_LL_Init+0x94>)
 80078c8:	f7fb f83c 	bl	8002944 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078cc:	2280      	movs	r2, #128	; 0x80
 80078ce:	2101      	movs	r1, #1
 80078d0:	4803      	ldr	r0, [pc, #12]	; (80078e0 <USBD_LL_Init+0x94>)
 80078d2:	f7fb f837 	bl	8002944 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	2000173c 	.word	0x2000173c

080078e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7f9 ff25 	bl	800174a <HAL_PCD_Start>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f942 	bl	8007b90 <USBD_Get_USB_Status>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007910:	7bbb      	ldrb	r3, [r7, #14]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	461a      	mov	r2, r3
 8007928:	4603      	mov	r3, r0
 800792a:	70fb      	strb	r3, [r7, #3]
 800792c:	460b      	mov	r3, r1
 800792e:	70bb      	strb	r3, [r7, #2]
 8007930:	4613      	mov	r3, r2
 8007932:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007942:	78bb      	ldrb	r3, [r7, #2]
 8007944:	883a      	ldrh	r2, [r7, #0]
 8007946:	78f9      	ldrb	r1, [r7, #3]
 8007948:	f7fa fbf6 	bl	8002138 <HAL_PCD_EP_Open>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f91c 	bl	8007b90 <USBD_Get_USB_Status>
 8007958:	4603      	mov	r3, r0
 800795a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800795c:	7bbb      	ldrb	r3, [r7, #14]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007980:	78fa      	ldrb	r2, [r7, #3]
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f7fa fc3f 	bl	8002208 <HAL_PCD_EP_Close>
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f8fd 	bl	8007b90 <USBD_Get_USB_Status>
 8007996:	4603      	mov	r3, r0
 8007998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800799a:	7bbb      	ldrb	r3, [r7, #14]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fa fd17 	bl	80023f6 <HAL_PCD_EP_SetStall>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f8de 	bl	8007b90 <USBD_Get_USB_Status>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fa fd5c 	bl	80024be <HAL_PCD_EP_ClrStall>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f8bf 	bl	8007b90 <USBD_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	da0b      	bge.n	8007a54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	4613      	mov	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	333e      	adds	r3, #62	; 0x3e
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	e00b      	b.n	8007a6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007a6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fa fb29 	bl	80020ee <HAL_PCD_SetAddress>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f874 	bl	8007b90 <USBD_Get_USB_Status>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b086      	sub	sp, #24
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ad4:	7af9      	ldrb	r1, [r7, #11]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	f7fa fc42 	bl	8002362 <HAL_PCD_EP_Transmit>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 f853 	bl	8007b90 <USBD_Get_USB_Status>
 8007aea:	4603      	mov	r3, r0
 8007aec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aee:	7dbb      	ldrb	r3, [r7, #22]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	460b      	mov	r3, r1
 8007b06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b16:	7af9      	ldrb	r1, [r7, #11]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	f7fa fbbe 	bl	800229c <HAL_PCD_EP_Receive>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f832 	bl	8007b90 <USBD_Get_USB_Status>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b30:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fa fbee 	bl	8002332 <HAL_PCD_EP_GetRxCount>
 8007b56:	4603      	mov	r3, r0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b68:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <USBD_static_malloc+0x18>)
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20001c48 	.word	0x20001c48

08007b7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d817      	bhi.n	8007bd4 <USBD_Get_USB_Status+0x44>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_Get_USB_Status+0x1c>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bbd 	.word	0x08007bbd
 8007bb0:	08007bc3 	.word	0x08007bc3
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bcf 	.word	0x08007bcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	e00b      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc6:	e008      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	e005      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd2:	e002      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd8:	bf00      	nop
  }
  return usb_status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <siprintf>:
 8007be8:	b40e      	push	{r1, r2, r3}
 8007bea:	b500      	push	{lr}
 8007bec:	b09c      	sub	sp, #112	; 0x70
 8007bee:	ab1d      	add	r3, sp, #116	; 0x74
 8007bf0:	9002      	str	r0, [sp, #8]
 8007bf2:	9006      	str	r0, [sp, #24]
 8007bf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bf8:	4809      	ldr	r0, [pc, #36]	; (8007c20 <siprintf+0x38>)
 8007bfa:	9107      	str	r1, [sp, #28]
 8007bfc:	9104      	str	r1, [sp, #16]
 8007bfe:	4909      	ldr	r1, [pc, #36]	; (8007c24 <siprintf+0x3c>)
 8007c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c04:	9105      	str	r1, [sp, #20]
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	a902      	add	r1, sp, #8
 8007c0c:	f000 f9a0 	bl	8007f50 <_svfiprintf_r>
 8007c10:	9b02      	ldr	r3, [sp, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	b01c      	add	sp, #112	; 0x70
 8007c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c1c:	b003      	add	sp, #12
 8007c1e:	4770      	bx	lr
 8007c20:	20000148 	.word	0x20000148
 8007c24:	ffff0208 	.word	0xffff0208

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <__errno>:
 8007c38:	4b01      	ldr	r3, [pc, #4]	; (8007c40 <__errno+0x8>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	20000148 	.word	0x20000148

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4d0d      	ldr	r5, [pc, #52]	; (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	; (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1b64      	subs	r4, r4, r5
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2600      	movs	r6, #0
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4d0b      	ldr	r5, [pc, #44]	; (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	; (8007c88 <__libc_init_array+0x44>)
 8007c58:	f000 fc6a 	bl	8008530 <_init>
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2600      	movs	r6, #0
 8007c62:	42a6      	cmp	r6, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6c:	4798      	blx	r3
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c76:	4798      	blx	r3
 8007c78:	3601      	adds	r6, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	080086e0 	.word	0x080086e0
 8007c80:	080086e0 	.word	0x080086e0
 8007c84:	080086e0 	.word	0x080086e0
 8007c88:	080086e4 	.word	0x080086e4

08007c8c <__retarget_lock_acquire_recursive>:
 8007c8c:	4770      	bx	lr

08007c8e <__retarget_lock_release_recursive>:
 8007c8e:	4770      	bx	lr

08007c90 <memcpy>:
 8007c90:	440a      	add	r2, r1
 8007c92:	4291      	cmp	r1, r2
 8007c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c98:	d100      	bne.n	8007c9c <memcpy+0xc>
 8007c9a:	4770      	bx	lr
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	d1f9      	bne.n	8007c9e <memcpy+0xe>
 8007caa:	bd10      	pop	{r4, pc}

08007cac <_free_r>:
 8007cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d044      	beq.n	8007d3c <_free_r+0x90>
 8007cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb6:	9001      	str	r0, [sp, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f1a1 0404 	sub.w	r4, r1, #4
 8007cbe:	bfb8      	it	lt
 8007cc0:	18e4      	addlt	r4, r4, r3
 8007cc2:	f000 f8df 	bl	8007e84 <__malloc_lock>
 8007cc6:	4a1e      	ldr	r2, [pc, #120]	; (8007d40 <_free_r+0x94>)
 8007cc8:	9801      	ldr	r0, [sp, #4]
 8007cca:	6813      	ldr	r3, [r2, #0]
 8007ccc:	b933      	cbnz	r3, 8007cdc <_free_r+0x30>
 8007cce:	6063      	str	r3, [r4, #4]
 8007cd0:	6014      	str	r4, [r2, #0]
 8007cd2:	b003      	add	sp, #12
 8007cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cd8:	f000 b8da 	b.w	8007e90 <__malloc_unlock>
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	d908      	bls.n	8007cf2 <_free_r+0x46>
 8007ce0:	6825      	ldr	r5, [r4, #0]
 8007ce2:	1961      	adds	r1, r4, r5
 8007ce4:	428b      	cmp	r3, r1
 8007ce6:	bf01      	itttt	eq
 8007ce8:	6819      	ldreq	r1, [r3, #0]
 8007cea:	685b      	ldreq	r3, [r3, #4]
 8007cec:	1949      	addeq	r1, r1, r5
 8007cee:	6021      	streq	r1, [r4, #0]
 8007cf0:	e7ed      	b.n	8007cce <_free_r+0x22>
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b10b      	cbz	r3, 8007cfc <_free_r+0x50>
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d9fa      	bls.n	8007cf2 <_free_r+0x46>
 8007cfc:	6811      	ldr	r1, [r2, #0]
 8007cfe:	1855      	adds	r5, r2, r1
 8007d00:	42a5      	cmp	r5, r4
 8007d02:	d10b      	bne.n	8007d1c <_free_r+0x70>
 8007d04:	6824      	ldr	r4, [r4, #0]
 8007d06:	4421      	add	r1, r4
 8007d08:	1854      	adds	r4, r2, r1
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	6011      	str	r1, [r2, #0]
 8007d0e:	d1e0      	bne.n	8007cd2 <_free_r+0x26>
 8007d10:	681c      	ldr	r4, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	6053      	str	r3, [r2, #4]
 8007d16:	440c      	add	r4, r1
 8007d18:	6014      	str	r4, [r2, #0]
 8007d1a:	e7da      	b.n	8007cd2 <_free_r+0x26>
 8007d1c:	d902      	bls.n	8007d24 <_free_r+0x78>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	6003      	str	r3, [r0, #0]
 8007d22:	e7d6      	b.n	8007cd2 <_free_r+0x26>
 8007d24:	6825      	ldr	r5, [r4, #0]
 8007d26:	1961      	adds	r1, r4, r5
 8007d28:	428b      	cmp	r3, r1
 8007d2a:	bf04      	itt	eq
 8007d2c:	6819      	ldreq	r1, [r3, #0]
 8007d2e:	685b      	ldreq	r3, [r3, #4]
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	bf04      	itt	eq
 8007d34:	1949      	addeq	r1, r1, r5
 8007d36:	6021      	streq	r1, [r4, #0]
 8007d38:	6054      	str	r4, [r2, #4]
 8007d3a:	e7ca      	b.n	8007cd2 <_free_r+0x26>
 8007d3c:	b003      	add	sp, #12
 8007d3e:	bd30      	pop	{r4, r5, pc}
 8007d40:	20001fa8 	.word	0x20001fa8

08007d44 <sbrk_aligned>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4e0e      	ldr	r6, [pc, #56]	; (8007d80 <sbrk_aligned+0x3c>)
 8007d48:	460c      	mov	r4, r1
 8007d4a:	6831      	ldr	r1, [r6, #0]
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	b911      	cbnz	r1, 8007d56 <sbrk_aligned+0x12>
 8007d50:	f000 fba6 	bl	80084a0 <_sbrk_r>
 8007d54:	6030      	str	r0, [r6, #0]
 8007d56:	4621      	mov	r1, r4
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f000 fba1 	bl	80084a0 <_sbrk_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	d00a      	beq.n	8007d78 <sbrk_aligned+0x34>
 8007d62:	1cc4      	adds	r4, r0, #3
 8007d64:	f024 0403 	bic.w	r4, r4, #3
 8007d68:	42a0      	cmp	r0, r4
 8007d6a:	d007      	beq.n	8007d7c <sbrk_aligned+0x38>
 8007d6c:	1a21      	subs	r1, r4, r0
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 fb96 	bl	80084a0 <_sbrk_r>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d101      	bne.n	8007d7c <sbrk_aligned+0x38>
 8007d78:	f04f 34ff 	mov.w	r4, #4294967295
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	20001fac 	.word	0x20001fac

08007d84 <_malloc_r>:
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	1ccd      	adds	r5, r1, #3
 8007d8a:	f025 0503 	bic.w	r5, r5, #3
 8007d8e:	3508      	adds	r5, #8
 8007d90:	2d0c      	cmp	r5, #12
 8007d92:	bf38      	it	cc
 8007d94:	250c      	movcc	r5, #12
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	4607      	mov	r7, r0
 8007d9a:	db01      	blt.n	8007da0 <_malloc_r+0x1c>
 8007d9c:	42a9      	cmp	r1, r5
 8007d9e:	d905      	bls.n	8007dac <_malloc_r+0x28>
 8007da0:	230c      	movs	r3, #12
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	2600      	movs	r6, #0
 8007da6:	4630      	mov	r0, r6
 8007da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e80 <_malloc_r+0xfc>
 8007db0:	f000 f868 	bl	8007e84 <__malloc_lock>
 8007db4:	f8d8 3000 	ldr.w	r3, [r8]
 8007db8:	461c      	mov	r4, r3
 8007dba:	bb5c      	cbnz	r4, 8007e14 <_malloc_r+0x90>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f7ff ffc0 	bl	8007d44 <sbrk_aligned>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	d155      	bne.n	8007e76 <_malloc_r+0xf2>
 8007dca:	f8d8 4000 	ldr.w	r4, [r8]
 8007dce:	4626      	mov	r6, r4
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	d145      	bne.n	8007e60 <_malloc_r+0xdc>
 8007dd4:	2c00      	cmp	r4, #0
 8007dd6:	d048      	beq.n	8007e6a <_malloc_r+0xe6>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4638      	mov	r0, r7
 8007dde:	eb04 0903 	add.w	r9, r4, r3
 8007de2:	f000 fb5d 	bl	80084a0 <_sbrk_r>
 8007de6:	4581      	cmp	r9, r0
 8007de8:	d13f      	bne.n	8007e6a <_malloc_r+0xe6>
 8007dea:	6821      	ldr	r1, [r4, #0]
 8007dec:	1a6d      	subs	r5, r5, r1
 8007dee:	4629      	mov	r1, r5
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff ffa7 	bl	8007d44 <sbrk_aligned>
 8007df6:	3001      	adds	r0, #1
 8007df8:	d037      	beq.n	8007e6a <_malloc_r+0xe6>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	442b      	add	r3, r5
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	f8d8 3000 	ldr.w	r3, [r8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d038      	beq.n	8007e7a <_malloc_r+0xf6>
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	42a2      	cmp	r2, r4
 8007e0c:	d12b      	bne.n	8007e66 <_malloc_r+0xe2>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	605a      	str	r2, [r3, #4]
 8007e12:	e00f      	b.n	8007e34 <_malloc_r+0xb0>
 8007e14:	6822      	ldr	r2, [r4, #0]
 8007e16:	1b52      	subs	r2, r2, r5
 8007e18:	d41f      	bmi.n	8007e5a <_malloc_r+0xd6>
 8007e1a:	2a0b      	cmp	r2, #11
 8007e1c:	d917      	bls.n	8007e4e <_malloc_r+0xca>
 8007e1e:	1961      	adds	r1, r4, r5
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	6025      	str	r5, [r4, #0]
 8007e24:	bf18      	it	ne
 8007e26:	6059      	strne	r1, [r3, #4]
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	bf08      	it	eq
 8007e2c:	f8c8 1000 	streq.w	r1, [r8]
 8007e30:	5162      	str	r2, [r4, r5]
 8007e32:	604b      	str	r3, [r1, #4]
 8007e34:	4638      	mov	r0, r7
 8007e36:	f104 060b 	add.w	r6, r4, #11
 8007e3a:	f000 f829 	bl	8007e90 <__malloc_unlock>
 8007e3e:	f026 0607 	bic.w	r6, r6, #7
 8007e42:	1d23      	adds	r3, r4, #4
 8007e44:	1af2      	subs	r2, r6, r3
 8007e46:	d0ae      	beq.n	8007da6 <_malloc_r+0x22>
 8007e48:	1b9b      	subs	r3, r3, r6
 8007e4a:	50a3      	str	r3, [r4, r2]
 8007e4c:	e7ab      	b.n	8007da6 <_malloc_r+0x22>
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	6862      	ldr	r2, [r4, #4]
 8007e52:	d1dd      	bne.n	8007e10 <_malloc_r+0x8c>
 8007e54:	f8c8 2000 	str.w	r2, [r8]
 8007e58:	e7ec      	b.n	8007e34 <_malloc_r+0xb0>
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	6864      	ldr	r4, [r4, #4]
 8007e5e:	e7ac      	b.n	8007dba <_malloc_r+0x36>
 8007e60:	4634      	mov	r4, r6
 8007e62:	6876      	ldr	r6, [r6, #4]
 8007e64:	e7b4      	b.n	8007dd0 <_malloc_r+0x4c>
 8007e66:	4613      	mov	r3, r2
 8007e68:	e7cc      	b.n	8007e04 <_malloc_r+0x80>
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f000 f80e 	bl	8007e90 <__malloc_unlock>
 8007e74:	e797      	b.n	8007da6 <_malloc_r+0x22>
 8007e76:	6025      	str	r5, [r4, #0]
 8007e78:	e7dc      	b.n	8007e34 <_malloc_r+0xb0>
 8007e7a:	605b      	str	r3, [r3, #4]
 8007e7c:	deff      	udf	#255	; 0xff
 8007e7e:	bf00      	nop
 8007e80:	20001fa8 	.word	0x20001fa8

08007e84 <__malloc_lock>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__malloc_lock+0x8>)
 8007e86:	f7ff bf01 	b.w	8007c8c <__retarget_lock_acquire_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	20001fa4 	.word	0x20001fa4

08007e90 <__malloc_unlock>:
 8007e90:	4801      	ldr	r0, [pc, #4]	; (8007e98 <__malloc_unlock+0x8>)
 8007e92:	f7ff befc 	b.w	8007c8e <__retarget_lock_release_recursive>
 8007e96:	bf00      	nop
 8007e98:	20001fa4 	.word	0x20001fa4

08007e9c <__ssputs_r>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	688e      	ldr	r6, [r1, #8]
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	42be      	cmp	r6, r7
 8007ea6:	680b      	ldr	r3, [r1, #0]
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4690      	mov	r8, r2
 8007eae:	d82c      	bhi.n	8007f0a <__ssputs_r+0x6e>
 8007eb0:	898a      	ldrh	r2, [r1, #12]
 8007eb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb6:	d026      	beq.n	8007f06 <__ssputs_r+0x6a>
 8007eb8:	6965      	ldr	r5, [r4, #20]
 8007eba:	6909      	ldr	r1, [r1, #16]
 8007ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec0:	eba3 0901 	sub.w	r9, r3, r1
 8007ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec8:	1c7b      	adds	r3, r7, #1
 8007eca:	444b      	add	r3, r9
 8007ecc:	106d      	asrs	r5, r5, #1
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	bf38      	it	cc
 8007ed2:	461d      	movcc	r5, r3
 8007ed4:	0553      	lsls	r3, r2, #21
 8007ed6:	d527      	bpl.n	8007f28 <__ssputs_r+0x8c>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	f7ff ff53 	bl	8007d84 <_malloc_r>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	b360      	cbz	r0, 8007f3c <__ssputs_r+0xa0>
 8007ee2:	6921      	ldr	r1, [r4, #16]
 8007ee4:	464a      	mov	r2, r9
 8007ee6:	f7ff fed3 	bl	8007c90 <memcpy>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	6126      	str	r6, [r4, #16]
 8007ef8:	6165      	str	r5, [r4, #20]
 8007efa:	444e      	add	r6, r9
 8007efc:	eba5 0509 	sub.w	r5, r5, r9
 8007f00:	6026      	str	r6, [r4, #0]
 8007f02:	60a5      	str	r5, [r4, #8]
 8007f04:	463e      	mov	r6, r7
 8007f06:	42be      	cmp	r6, r7
 8007f08:	d900      	bls.n	8007f0c <__ssputs_r+0x70>
 8007f0a:	463e      	mov	r6, r7
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	4632      	mov	r2, r6
 8007f10:	4641      	mov	r1, r8
 8007f12:	f000 faab 	bl	800846c <memmove>
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	1b9b      	subs	r3, r3, r6
 8007f1a:	60a3      	str	r3, [r4, #8]
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	4433      	add	r3, r6
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	2000      	movs	r0, #0
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	462a      	mov	r2, r5
 8007f2a:	f000 fac9 	bl	80084c0 <_realloc_r>
 8007f2e:	4606      	mov	r6, r0
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d1e0      	bne.n	8007ef6 <__ssputs_r+0x5a>
 8007f34:	6921      	ldr	r1, [r4, #16]
 8007f36:	4650      	mov	r0, sl
 8007f38:	f7ff feb8 	bl	8007cac <_free_r>
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	f8ca 3000 	str.w	r3, [sl]
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4e:	e7e9      	b.n	8007f24 <__ssputs_r+0x88>

08007f50 <_svfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	4698      	mov	r8, r3
 8007f56:	898b      	ldrh	r3, [r1, #12]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	b09d      	sub	sp, #116	; 0x74
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	d50e      	bpl.n	8007f82 <_svfiprintf_r+0x32>
 8007f64:	690b      	ldr	r3, [r1, #16]
 8007f66:	b963      	cbnz	r3, 8007f82 <_svfiprintf_r+0x32>
 8007f68:	2140      	movs	r1, #64	; 0x40
 8007f6a:	f7ff ff0b 	bl	8007d84 <_malloc_r>
 8007f6e:	6028      	str	r0, [r5, #0]
 8007f70:	6128      	str	r0, [r5, #16]
 8007f72:	b920      	cbnz	r0, 8007f7e <_svfiprintf_r+0x2e>
 8007f74:	230c      	movs	r3, #12
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	e0d0      	b.n	8008120 <_svfiprintf_r+0x1d0>
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	616b      	str	r3, [r5, #20]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9309      	str	r3, [sp, #36]	; 0x24
 8007f86:	2320      	movs	r3, #32
 8007f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f90:	2330      	movs	r3, #48	; 0x30
 8007f92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008138 <_svfiprintf_r+0x1e8>
 8007f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f9a:	f04f 0901 	mov.w	r9, #1
 8007f9e:	4623      	mov	r3, r4
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa6:	b10a      	cbz	r2, 8007fac <_svfiprintf_r+0x5c>
 8007fa8:	2a25      	cmp	r2, #37	; 0x25
 8007faa:	d1f9      	bne.n	8007fa0 <_svfiprintf_r+0x50>
 8007fac:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb0:	d00b      	beq.n	8007fca <_svfiprintf_r+0x7a>
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f7ff ff6f 	bl	8007e9c <__ssputs_r>
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f000 80a9 	beq.w	8008116 <_svfiprintf_r+0x1c6>
 8007fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc6:	445a      	add	r2, fp
 8007fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8007fca:	f89a 3000 	ldrb.w	r3, [sl]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80a1 	beq.w	8008116 <_svfiprintf_r+0x1c6>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fde:	f10a 0a01 	add.w	sl, sl, #1
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	9307      	str	r3, [sp, #28]
 8007fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fea:	931a      	str	r3, [sp, #104]	; 0x68
 8007fec:	4654      	mov	r4, sl
 8007fee:	2205      	movs	r2, #5
 8007ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff4:	4850      	ldr	r0, [pc, #320]	; (8008138 <_svfiprintf_r+0x1e8>)
 8007ff6:	f7f8 f8f3 	bl	80001e0 <memchr>
 8007ffa:	9a04      	ldr	r2, [sp, #16]
 8007ffc:	b9d8      	cbnz	r0, 8008036 <_svfiprintf_r+0xe6>
 8007ffe:	06d0      	lsls	r0, r2, #27
 8008000:	bf44      	itt	mi
 8008002:	2320      	movmi	r3, #32
 8008004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008008:	0711      	lsls	r1, r2, #28
 800800a:	bf44      	itt	mi
 800800c:	232b      	movmi	r3, #43	; 0x2b
 800800e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008012:	f89a 3000 	ldrb.w	r3, [sl]
 8008016:	2b2a      	cmp	r3, #42	; 0x2a
 8008018:	d015      	beq.n	8008046 <_svfiprintf_r+0xf6>
 800801a:	9a07      	ldr	r2, [sp, #28]
 800801c:	4654      	mov	r4, sl
 800801e:	2000      	movs	r0, #0
 8008020:	f04f 0c0a 	mov.w	ip, #10
 8008024:	4621      	mov	r1, r4
 8008026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802a:	3b30      	subs	r3, #48	; 0x30
 800802c:	2b09      	cmp	r3, #9
 800802e:	d94d      	bls.n	80080cc <_svfiprintf_r+0x17c>
 8008030:	b1b0      	cbz	r0, 8008060 <_svfiprintf_r+0x110>
 8008032:	9207      	str	r2, [sp, #28]
 8008034:	e014      	b.n	8008060 <_svfiprintf_r+0x110>
 8008036:	eba0 0308 	sub.w	r3, r0, r8
 800803a:	fa09 f303 	lsl.w	r3, r9, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	46a2      	mov	sl, r4
 8008044:	e7d2      	b.n	8007fec <_svfiprintf_r+0x9c>
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	1d19      	adds	r1, r3, #4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	9103      	str	r1, [sp, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	bfbb      	ittet	lt
 8008052:	425b      	neglt	r3, r3
 8008054:	f042 0202 	orrlt.w	r2, r2, #2
 8008058:	9307      	strge	r3, [sp, #28]
 800805a:	9307      	strlt	r3, [sp, #28]
 800805c:	bfb8      	it	lt
 800805e:	9204      	strlt	r2, [sp, #16]
 8008060:	7823      	ldrb	r3, [r4, #0]
 8008062:	2b2e      	cmp	r3, #46	; 0x2e
 8008064:	d10c      	bne.n	8008080 <_svfiprintf_r+0x130>
 8008066:	7863      	ldrb	r3, [r4, #1]
 8008068:	2b2a      	cmp	r3, #42	; 0x2a
 800806a:	d134      	bne.n	80080d6 <_svfiprintf_r+0x186>
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	9203      	str	r2, [sp, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfb8      	it	lt
 8008078:	f04f 33ff 	movlt.w	r3, #4294967295
 800807c:	3402      	adds	r4, #2
 800807e:	9305      	str	r3, [sp, #20]
 8008080:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008148 <_svfiprintf_r+0x1f8>
 8008084:	7821      	ldrb	r1, [r4, #0]
 8008086:	2203      	movs	r2, #3
 8008088:	4650      	mov	r0, sl
 800808a:	f7f8 f8a9 	bl	80001e0 <memchr>
 800808e:	b138      	cbz	r0, 80080a0 <_svfiprintf_r+0x150>
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	eba0 000a 	sub.w	r0, r0, sl
 8008096:	2240      	movs	r2, #64	; 0x40
 8008098:	4082      	lsls	r2, r0
 800809a:	4313      	orrs	r3, r2
 800809c:	3401      	adds	r4, #1
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a4:	4825      	ldr	r0, [pc, #148]	; (800813c <_svfiprintf_r+0x1ec>)
 80080a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080aa:	2206      	movs	r2, #6
 80080ac:	f7f8 f898 	bl	80001e0 <memchr>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d038      	beq.n	8008126 <_svfiprintf_r+0x1d6>
 80080b4:	4b22      	ldr	r3, [pc, #136]	; (8008140 <_svfiprintf_r+0x1f0>)
 80080b6:	bb1b      	cbnz	r3, 8008100 <_svfiprintf_r+0x1b0>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	3307      	adds	r3, #7
 80080bc:	f023 0307 	bic.w	r3, r3, #7
 80080c0:	3308      	adds	r3, #8
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	4433      	add	r3, r6
 80080c8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ca:	e768      	b.n	8007f9e <_svfiprintf_r+0x4e>
 80080cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d0:	460c      	mov	r4, r1
 80080d2:	2001      	movs	r0, #1
 80080d4:	e7a6      	b.n	8008024 <_svfiprintf_r+0xd4>
 80080d6:	2300      	movs	r3, #0
 80080d8:	3401      	adds	r4, #1
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	4619      	mov	r1, r3
 80080de:	f04f 0c0a 	mov.w	ip, #10
 80080e2:	4620      	mov	r0, r4
 80080e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e8:	3a30      	subs	r2, #48	; 0x30
 80080ea:	2a09      	cmp	r2, #9
 80080ec:	d903      	bls.n	80080f6 <_svfiprintf_r+0x1a6>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0c6      	beq.n	8008080 <_svfiprintf_r+0x130>
 80080f2:	9105      	str	r1, [sp, #20]
 80080f4:	e7c4      	b.n	8008080 <_svfiprintf_r+0x130>
 80080f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fa:	4604      	mov	r4, r0
 80080fc:	2301      	movs	r3, #1
 80080fe:	e7f0      	b.n	80080e2 <_svfiprintf_r+0x192>
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	462a      	mov	r2, r5
 8008106:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <_svfiprintf_r+0x1f4>)
 8008108:	a904      	add	r1, sp, #16
 800810a:	4638      	mov	r0, r7
 800810c:	f3af 8000 	nop.w
 8008110:	1c42      	adds	r2, r0, #1
 8008112:	4606      	mov	r6, r0
 8008114:	d1d6      	bne.n	80080c4 <_svfiprintf_r+0x174>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	065b      	lsls	r3, r3, #25
 800811a:	f53f af2d 	bmi.w	8007f78 <_svfiprintf_r+0x28>
 800811e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008120:	b01d      	add	sp, #116	; 0x74
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	ab03      	add	r3, sp, #12
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	462a      	mov	r2, r5
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <_svfiprintf_r+0x1f4>)
 800812e:	a904      	add	r1, sp, #16
 8008130:	4638      	mov	r0, r7
 8008132:	f000 f879 	bl	8008228 <_printf_i>
 8008136:	e7eb      	b.n	8008110 <_svfiprintf_r+0x1c0>
 8008138:	080086a4 	.word	0x080086a4
 800813c:	080086ae 	.word	0x080086ae
 8008140:	00000000 	.word	0x00000000
 8008144:	08007e9d 	.word	0x08007e9d
 8008148:	080086aa 	.word	0x080086aa

0800814c <_printf_common>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	4616      	mov	r6, r2
 8008152:	4699      	mov	r9, r3
 8008154:	688a      	ldr	r2, [r1, #8]
 8008156:	690b      	ldr	r3, [r1, #16]
 8008158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800815c:	4293      	cmp	r3, r2
 800815e:	bfb8      	it	lt
 8008160:	4613      	movlt	r3, r2
 8008162:	6033      	str	r3, [r6, #0]
 8008164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008168:	4607      	mov	r7, r0
 800816a:	460c      	mov	r4, r1
 800816c:	b10a      	cbz	r2, 8008172 <_printf_common+0x26>
 800816e:	3301      	adds	r3, #1
 8008170:	6033      	str	r3, [r6, #0]
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	0699      	lsls	r1, r3, #26
 8008176:	bf42      	ittt	mi
 8008178:	6833      	ldrmi	r3, [r6, #0]
 800817a:	3302      	addmi	r3, #2
 800817c:	6033      	strmi	r3, [r6, #0]
 800817e:	6825      	ldr	r5, [r4, #0]
 8008180:	f015 0506 	ands.w	r5, r5, #6
 8008184:	d106      	bne.n	8008194 <_printf_common+0x48>
 8008186:	f104 0a19 	add.w	sl, r4, #25
 800818a:	68e3      	ldr	r3, [r4, #12]
 800818c:	6832      	ldr	r2, [r6, #0]
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	42ab      	cmp	r3, r5
 8008192:	dc26      	bgt.n	80081e2 <_printf_common+0x96>
 8008194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008198:	1e13      	subs	r3, r2, #0
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	bf18      	it	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	0692      	lsls	r2, r2, #26
 80081a2:	d42b      	bmi.n	80081fc <_printf_common+0xb0>
 80081a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081a8:	4649      	mov	r1, r9
 80081aa:	4638      	mov	r0, r7
 80081ac:	47c0      	blx	r8
 80081ae:	3001      	adds	r0, #1
 80081b0:	d01e      	beq.n	80081f0 <_printf_common+0xa4>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	6922      	ldr	r2, [r4, #16]
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	bf02      	ittt	eq
 80081be:	68e5      	ldreq	r5, [r4, #12]
 80081c0:	6833      	ldreq	r3, [r6, #0]
 80081c2:	1aed      	subeq	r5, r5, r3
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	bf0c      	ite	eq
 80081c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081cc:	2500      	movne	r5, #0
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bfc4      	itt	gt
 80081d2:	1a9b      	subgt	r3, r3, r2
 80081d4:	18ed      	addgt	r5, r5, r3
 80081d6:	2600      	movs	r6, #0
 80081d8:	341a      	adds	r4, #26
 80081da:	42b5      	cmp	r5, r6
 80081dc:	d11a      	bne.n	8008214 <_printf_common+0xc8>
 80081de:	2000      	movs	r0, #0
 80081e0:	e008      	b.n	80081f4 <_printf_common+0xa8>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4652      	mov	r2, sl
 80081e6:	4649      	mov	r1, r9
 80081e8:	4638      	mov	r0, r7
 80081ea:	47c0      	blx	r8
 80081ec:	3001      	adds	r0, #1
 80081ee:	d103      	bne.n	80081f8 <_printf_common+0xac>
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	3501      	adds	r5, #1
 80081fa:	e7c6      	b.n	800818a <_printf_common+0x3e>
 80081fc:	18e1      	adds	r1, r4, r3
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	2030      	movs	r0, #48	; 0x30
 8008202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008206:	4422      	add	r2, r4
 8008208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800820c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008210:	3302      	adds	r3, #2
 8008212:	e7c7      	b.n	80081a4 <_printf_common+0x58>
 8008214:	2301      	movs	r3, #1
 8008216:	4622      	mov	r2, r4
 8008218:	4649      	mov	r1, r9
 800821a:	4638      	mov	r0, r7
 800821c:	47c0      	blx	r8
 800821e:	3001      	adds	r0, #1
 8008220:	d0e6      	beq.n	80081f0 <_printf_common+0xa4>
 8008222:	3601      	adds	r6, #1
 8008224:	e7d9      	b.n	80081da <_printf_common+0x8e>
	...

08008228 <_printf_i>:
 8008228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	7e0f      	ldrb	r7, [r1, #24]
 800822e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008230:	2f78      	cmp	r7, #120	; 0x78
 8008232:	4691      	mov	r9, r2
 8008234:	4680      	mov	r8, r0
 8008236:	460c      	mov	r4, r1
 8008238:	469a      	mov	sl, r3
 800823a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800823e:	d807      	bhi.n	8008250 <_printf_i+0x28>
 8008240:	2f62      	cmp	r7, #98	; 0x62
 8008242:	d80a      	bhi.n	800825a <_printf_i+0x32>
 8008244:	2f00      	cmp	r7, #0
 8008246:	f000 80d4 	beq.w	80083f2 <_printf_i+0x1ca>
 800824a:	2f58      	cmp	r7, #88	; 0x58
 800824c:	f000 80c0 	beq.w	80083d0 <_printf_i+0x1a8>
 8008250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008258:	e03a      	b.n	80082d0 <_printf_i+0xa8>
 800825a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800825e:	2b15      	cmp	r3, #21
 8008260:	d8f6      	bhi.n	8008250 <_printf_i+0x28>
 8008262:	a101      	add	r1, pc, #4	; (adr r1, 8008268 <_printf_i+0x40>)
 8008264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008268:	080082c1 	.word	0x080082c1
 800826c:	080082d5 	.word	0x080082d5
 8008270:	08008251 	.word	0x08008251
 8008274:	08008251 	.word	0x08008251
 8008278:	08008251 	.word	0x08008251
 800827c:	08008251 	.word	0x08008251
 8008280:	080082d5 	.word	0x080082d5
 8008284:	08008251 	.word	0x08008251
 8008288:	08008251 	.word	0x08008251
 800828c:	08008251 	.word	0x08008251
 8008290:	08008251 	.word	0x08008251
 8008294:	080083d9 	.word	0x080083d9
 8008298:	08008301 	.word	0x08008301
 800829c:	08008393 	.word	0x08008393
 80082a0:	08008251 	.word	0x08008251
 80082a4:	08008251 	.word	0x08008251
 80082a8:	080083fb 	.word	0x080083fb
 80082ac:	08008251 	.word	0x08008251
 80082b0:	08008301 	.word	0x08008301
 80082b4:	08008251 	.word	0x08008251
 80082b8:	08008251 	.word	0x08008251
 80082bc:	0800839b 	.word	0x0800839b
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	1d1a      	adds	r2, r3, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	602a      	str	r2, [r5, #0]
 80082c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d0:	2301      	movs	r3, #1
 80082d2:	e09f      	b.n	8008414 <_printf_i+0x1ec>
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	0607      	lsls	r7, r0, #24
 80082da:	f103 0104 	add.w	r1, r3, #4
 80082de:	6029      	str	r1, [r5, #0]
 80082e0:	d501      	bpl.n	80082e6 <_printf_i+0xbe>
 80082e2:	681e      	ldr	r6, [r3, #0]
 80082e4:	e003      	b.n	80082ee <_printf_i+0xc6>
 80082e6:	0646      	lsls	r6, r0, #25
 80082e8:	d5fb      	bpl.n	80082e2 <_printf_i+0xba>
 80082ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	da03      	bge.n	80082fa <_printf_i+0xd2>
 80082f2:	232d      	movs	r3, #45	; 0x2d
 80082f4:	4276      	negs	r6, r6
 80082f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082fa:	485a      	ldr	r0, [pc, #360]	; (8008464 <_printf_i+0x23c>)
 80082fc:	230a      	movs	r3, #10
 80082fe:	e012      	b.n	8008326 <_printf_i+0xfe>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	6820      	ldr	r0, [r4, #0]
 8008304:	1d19      	adds	r1, r3, #4
 8008306:	6029      	str	r1, [r5, #0]
 8008308:	0605      	lsls	r5, r0, #24
 800830a:	d501      	bpl.n	8008310 <_printf_i+0xe8>
 800830c:	681e      	ldr	r6, [r3, #0]
 800830e:	e002      	b.n	8008316 <_printf_i+0xee>
 8008310:	0641      	lsls	r1, r0, #25
 8008312:	d5fb      	bpl.n	800830c <_printf_i+0xe4>
 8008314:	881e      	ldrh	r6, [r3, #0]
 8008316:	4853      	ldr	r0, [pc, #332]	; (8008464 <_printf_i+0x23c>)
 8008318:	2f6f      	cmp	r7, #111	; 0x6f
 800831a:	bf0c      	ite	eq
 800831c:	2308      	moveq	r3, #8
 800831e:	230a      	movne	r3, #10
 8008320:	2100      	movs	r1, #0
 8008322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008326:	6865      	ldr	r5, [r4, #4]
 8008328:	60a5      	str	r5, [r4, #8]
 800832a:	2d00      	cmp	r5, #0
 800832c:	bfa2      	ittt	ge
 800832e:	6821      	ldrge	r1, [r4, #0]
 8008330:	f021 0104 	bicge.w	r1, r1, #4
 8008334:	6021      	strge	r1, [r4, #0]
 8008336:	b90e      	cbnz	r6, 800833c <_printf_i+0x114>
 8008338:	2d00      	cmp	r5, #0
 800833a:	d04b      	beq.n	80083d4 <_printf_i+0x1ac>
 800833c:	4615      	mov	r5, r2
 800833e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008342:	fb03 6711 	mls	r7, r3, r1, r6
 8008346:	5dc7      	ldrb	r7, [r0, r7]
 8008348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800834c:	4637      	mov	r7, r6
 800834e:	42bb      	cmp	r3, r7
 8008350:	460e      	mov	r6, r1
 8008352:	d9f4      	bls.n	800833e <_printf_i+0x116>
 8008354:	2b08      	cmp	r3, #8
 8008356:	d10b      	bne.n	8008370 <_printf_i+0x148>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	07de      	lsls	r6, r3, #31
 800835c:	d508      	bpl.n	8008370 <_printf_i+0x148>
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	6861      	ldr	r1, [r4, #4]
 8008362:	4299      	cmp	r1, r3
 8008364:	bfde      	ittt	le
 8008366:	2330      	movle	r3, #48	; 0x30
 8008368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800836c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008370:	1b52      	subs	r2, r2, r5
 8008372:	6122      	str	r2, [r4, #16]
 8008374:	f8cd a000 	str.w	sl, [sp]
 8008378:	464b      	mov	r3, r9
 800837a:	aa03      	add	r2, sp, #12
 800837c:	4621      	mov	r1, r4
 800837e:	4640      	mov	r0, r8
 8008380:	f7ff fee4 	bl	800814c <_printf_common>
 8008384:	3001      	adds	r0, #1
 8008386:	d14a      	bne.n	800841e <_printf_i+0x1f6>
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	b004      	add	sp, #16
 800838e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	f043 0320 	orr.w	r3, r3, #32
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	4833      	ldr	r0, [pc, #204]	; (8008468 <_printf_i+0x240>)
 800839c:	2778      	movs	r7, #120	; 0x78
 800839e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	6829      	ldr	r1, [r5, #0]
 80083a6:	061f      	lsls	r7, r3, #24
 80083a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80083ac:	d402      	bmi.n	80083b4 <_printf_i+0x18c>
 80083ae:	065f      	lsls	r7, r3, #25
 80083b0:	bf48      	it	mi
 80083b2:	b2b6      	uxthmi	r6, r6
 80083b4:	07df      	lsls	r7, r3, #31
 80083b6:	bf48      	it	mi
 80083b8:	f043 0320 	orrmi.w	r3, r3, #32
 80083bc:	6029      	str	r1, [r5, #0]
 80083be:	bf48      	it	mi
 80083c0:	6023      	strmi	r3, [r4, #0]
 80083c2:	b91e      	cbnz	r6, 80083cc <_printf_i+0x1a4>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	f023 0320 	bic.w	r3, r3, #32
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	2310      	movs	r3, #16
 80083ce:	e7a7      	b.n	8008320 <_printf_i+0xf8>
 80083d0:	4824      	ldr	r0, [pc, #144]	; (8008464 <_printf_i+0x23c>)
 80083d2:	e7e4      	b.n	800839e <_printf_i+0x176>
 80083d4:	4615      	mov	r5, r2
 80083d6:	e7bd      	b.n	8008354 <_printf_i+0x12c>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	6826      	ldr	r6, [r4, #0]
 80083dc:	6961      	ldr	r1, [r4, #20]
 80083de:	1d18      	adds	r0, r3, #4
 80083e0:	6028      	str	r0, [r5, #0]
 80083e2:	0635      	lsls	r5, r6, #24
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	d501      	bpl.n	80083ec <_printf_i+0x1c4>
 80083e8:	6019      	str	r1, [r3, #0]
 80083ea:	e002      	b.n	80083f2 <_printf_i+0x1ca>
 80083ec:	0670      	lsls	r0, r6, #25
 80083ee:	d5fb      	bpl.n	80083e8 <_printf_i+0x1c0>
 80083f0:	8019      	strh	r1, [r3, #0]
 80083f2:	2300      	movs	r3, #0
 80083f4:	6123      	str	r3, [r4, #16]
 80083f6:	4615      	mov	r5, r2
 80083f8:	e7bc      	b.n	8008374 <_printf_i+0x14c>
 80083fa:	682b      	ldr	r3, [r5, #0]
 80083fc:	1d1a      	adds	r2, r3, #4
 80083fe:	602a      	str	r2, [r5, #0]
 8008400:	681d      	ldr	r5, [r3, #0]
 8008402:	6862      	ldr	r2, [r4, #4]
 8008404:	2100      	movs	r1, #0
 8008406:	4628      	mov	r0, r5
 8008408:	f7f7 feea 	bl	80001e0 <memchr>
 800840c:	b108      	cbz	r0, 8008412 <_printf_i+0x1ea>
 800840e:	1b40      	subs	r0, r0, r5
 8008410:	6060      	str	r0, [r4, #4]
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	6123      	str	r3, [r4, #16]
 8008416:	2300      	movs	r3, #0
 8008418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800841c:	e7aa      	b.n	8008374 <_printf_i+0x14c>
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	462a      	mov	r2, r5
 8008422:	4649      	mov	r1, r9
 8008424:	4640      	mov	r0, r8
 8008426:	47d0      	blx	sl
 8008428:	3001      	adds	r0, #1
 800842a:	d0ad      	beq.n	8008388 <_printf_i+0x160>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	079b      	lsls	r3, r3, #30
 8008430:	d413      	bmi.n	800845a <_printf_i+0x232>
 8008432:	68e0      	ldr	r0, [r4, #12]
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	4298      	cmp	r0, r3
 8008438:	bfb8      	it	lt
 800843a:	4618      	movlt	r0, r3
 800843c:	e7a6      	b.n	800838c <_printf_i+0x164>
 800843e:	2301      	movs	r3, #1
 8008440:	4632      	mov	r2, r6
 8008442:	4649      	mov	r1, r9
 8008444:	4640      	mov	r0, r8
 8008446:	47d0      	blx	sl
 8008448:	3001      	adds	r0, #1
 800844a:	d09d      	beq.n	8008388 <_printf_i+0x160>
 800844c:	3501      	adds	r5, #1
 800844e:	68e3      	ldr	r3, [r4, #12]
 8008450:	9903      	ldr	r1, [sp, #12]
 8008452:	1a5b      	subs	r3, r3, r1
 8008454:	42ab      	cmp	r3, r5
 8008456:	dcf2      	bgt.n	800843e <_printf_i+0x216>
 8008458:	e7eb      	b.n	8008432 <_printf_i+0x20a>
 800845a:	2500      	movs	r5, #0
 800845c:	f104 0619 	add.w	r6, r4, #25
 8008460:	e7f5      	b.n	800844e <_printf_i+0x226>
 8008462:	bf00      	nop
 8008464:	080086b5 	.word	0x080086b5
 8008468:	080086c6 	.word	0x080086c6

0800846c <memmove>:
 800846c:	4288      	cmp	r0, r1
 800846e:	b510      	push	{r4, lr}
 8008470:	eb01 0402 	add.w	r4, r1, r2
 8008474:	d902      	bls.n	800847c <memmove+0x10>
 8008476:	4284      	cmp	r4, r0
 8008478:	4623      	mov	r3, r4
 800847a:	d807      	bhi.n	800848c <memmove+0x20>
 800847c:	1e43      	subs	r3, r0, #1
 800847e:	42a1      	cmp	r1, r4
 8008480:	d008      	beq.n	8008494 <memmove+0x28>
 8008482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800848a:	e7f8      	b.n	800847e <memmove+0x12>
 800848c:	4402      	add	r2, r0
 800848e:	4601      	mov	r1, r0
 8008490:	428a      	cmp	r2, r1
 8008492:	d100      	bne.n	8008496 <memmove+0x2a>
 8008494:	bd10      	pop	{r4, pc}
 8008496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800849a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800849e:	e7f7      	b.n	8008490 <memmove+0x24>

080084a0 <_sbrk_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d06      	ldr	r5, [pc, #24]	; (80084bc <_sbrk_r+0x1c>)
 80084a4:	2300      	movs	r3, #0
 80084a6:	4604      	mov	r4, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	602b      	str	r3, [r5, #0]
 80084ac:	f7f8 fc7a 	bl	8000da4 <_sbrk>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_sbrk_r+0x1a>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_sbrk_r+0x1a>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20001fa0 	.word	0x20001fa0

080084c0 <_realloc_r>:
 80084c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	4680      	mov	r8, r0
 80084c6:	4614      	mov	r4, r2
 80084c8:	460e      	mov	r6, r1
 80084ca:	b921      	cbnz	r1, 80084d6 <_realloc_r+0x16>
 80084cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084d0:	4611      	mov	r1, r2
 80084d2:	f7ff bc57 	b.w	8007d84 <_malloc_r>
 80084d6:	b92a      	cbnz	r2, 80084e4 <_realloc_r+0x24>
 80084d8:	f7ff fbe8 	bl	8007cac <_free_r>
 80084dc:	4625      	mov	r5, r4
 80084de:	4628      	mov	r0, r5
 80084e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e4:	f000 f81b 	bl	800851e <_malloc_usable_size_r>
 80084e8:	4284      	cmp	r4, r0
 80084ea:	4607      	mov	r7, r0
 80084ec:	d802      	bhi.n	80084f4 <_realloc_r+0x34>
 80084ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084f2:	d812      	bhi.n	800851a <_realloc_r+0x5a>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4640      	mov	r0, r8
 80084f8:	f7ff fc44 	bl	8007d84 <_malloc_r>
 80084fc:	4605      	mov	r5, r0
 80084fe:	2800      	cmp	r0, #0
 8008500:	d0ed      	beq.n	80084de <_realloc_r+0x1e>
 8008502:	42bc      	cmp	r4, r7
 8008504:	4622      	mov	r2, r4
 8008506:	4631      	mov	r1, r6
 8008508:	bf28      	it	cs
 800850a:	463a      	movcs	r2, r7
 800850c:	f7ff fbc0 	bl	8007c90 <memcpy>
 8008510:	4631      	mov	r1, r6
 8008512:	4640      	mov	r0, r8
 8008514:	f7ff fbca 	bl	8007cac <_free_r>
 8008518:	e7e1      	b.n	80084de <_realloc_r+0x1e>
 800851a:	4635      	mov	r5, r6
 800851c:	e7df      	b.n	80084de <_realloc_r+0x1e>

0800851e <_malloc_usable_size_r>:
 800851e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008522:	1f18      	subs	r0, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfbc      	itt	lt
 8008528:	580b      	ldrlt	r3, [r1, r0]
 800852a:	18c0      	addlt	r0, r0, r3
 800852c:	4770      	bx	lr
	...

08008530 <_init>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr

0800853c <_fini>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr
